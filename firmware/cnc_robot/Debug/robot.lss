
robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000124c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  0000124c  000012e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e9  00802020  00802020  00001300  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00001aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002f2  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003464  00000000  00000000  00001ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008d5  00000000  00000000  00005356  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012b0  00000000  00000000  00005c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003a4  00000000  00000000  00006edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000014d3  00000000  00000000  00007280  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b18  00000000  00000000  00008753  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000002b3  00000000  00000000  0000926b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  0000951e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
       4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
       8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
       c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      50:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__vector_20>
      54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      64:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_25>
      68:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_26>
      6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      8c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      90:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      94:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      98:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      9c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      f4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      f8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      fc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     100:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     104:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     108:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     10c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     110:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     114:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     118:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     11c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     120:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     124:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     128:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     12c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     130:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     134:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     138:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     13c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     140:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     144:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     148:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     14c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     150:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     154:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     158:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     15c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     160:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     164:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     168:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     16c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     170:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     174:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     178:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     17c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     180:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     184:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     188:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     18c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     190:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     194:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     198:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     19c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	df e3       	ldi	r29, 0x3F	; 63
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ec e4       	ldi	r30, 0x4C	; 76
     214:	f2 e1       	ldi	r31, 0x12	; 18
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a0 32       	cpi	r26, 0x20	; 32
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e2       	ldi	r26, 0x20	; 32
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	a9 30       	cpi	r26, 0x09	; 9
     234:	b1 07       	cpc	r27, r17
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
     238:	0e 94 b2 06 	call	0xd64	; 0xd64 <main>
     23c:	0c 94 24 09 	jmp	0x1248	; 0x1248 <_exit>

00000240 <__bad_interrupt>:
     240:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000244 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     244:	0f 93       	push	r16
     246:	df 93       	push	r29
     248:	cf 93       	push	r28
     24a:	0f 92       	push	r0
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     250:	2f b7       	in	r18, 0x3f	; 63
     252:	29 83       	std	Y+1, r18	; 0x01
     254:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     256:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     258:	fc 01       	movw	r30, r24
     25a:	08 ed       	ldi	r16, 0xD8	; 216
     25c:	04 bf       	out	0x34, r16	; 52
     25e:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	8f bf       	out	0x3f, r24	; 63
#endif
}
     264:	0f 90       	pop	r0
     266:	cf 91       	pop	r28
     268:	df 91       	pop	r29
     26a:	0f 91       	pop	r16
     26c:	08 95       	ret

0000026e <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     26e:	66 23       	and	r22, r22
     270:	11 f0       	breq	.+4      	; 0x276 <CLKSYS_XOSC_Config+0x8>
     272:	90 e2       	ldi	r25, 0x20	; 32
     274:	01 c0       	rjmp	.+2      	; 0x278 <CLKSYS_XOSC_Config+0xa>
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	84 2b       	or	r24, r20
     27a:	89 2b       	or	r24, r25
     27c:	e0 e5       	ldi	r30, 0x50	; 80
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     282:	08 95       	ret

00000284 <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     284:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     286:	86 2b       	or	r24, r22
     288:	e0 e5       	ldi	r30, 0x50	; 80
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	85 83       	std	Z+5, r24	; 0x05
}
     28e:	08 95       	ret

00000290 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     290:	e0 e5       	ldi	r30, 0x50	; 80
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	90 81       	ld	r25, Z
     296:	28 2f       	mov	r18, r24
     298:	20 95       	com	r18
     29a:	92 23       	and	r25, r18
     29c:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     29e:	90 81       	ld	r25, Z
	return clkEnabled;
}
     2a0:	89 23       	and	r24, r25
     2a2:	08 95       	ret

000002a4 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     2a4:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     2a6:	81 e4       	ldi	r24, 0x41	; 65
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 22 01 	call	0x244	; 0x244 <CCPWrite>
}
     2ae:	08 95       	ret

000002b0 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     2b0:	1f 93       	push	r17
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     2b8:	c0 e4       	ldi	r28, 0x40	; 64
     2ba:	d0 e0       	ldi	r29, 0x00	; 0
     2bc:	68 81       	ld	r22, Y
     2be:	68 7f       	andi	r22, 0xF8	; 248
     2c0:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     2c2:	80 e4       	ldi	r24, 0x40	; 64
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 22 01 	call	0x244	; 0x244 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     2ca:	88 81       	ld	r24, Y
	return clkCtrl;
}
     2cc:	81 23       	and	r24, r17
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	08 95       	ret

000002d6 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
     2d6:	e0 e4       	ldi	r30, 0x40	; 64
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	93 81       	ldd	r25, Z+3	; 0x03
     2dc:	91 7f       	andi	r25, 0xF1	; 241
     2de:	91 60       	ori	r25, 0x01	; 1
     2e0:	89 2b       	or	r24, r25
     2e2:	83 83       	std	Z+3, r24	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
     2e4:	08 95       	ret

000002e6 <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
     2e6:	e0 e5       	ldi	r30, 0x50	; 80
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	26 81       	ldd	r18, Z+6	; 0x06
     2ec:	98 2f       	mov	r25, r24
     2ee:	38 2f       	mov	r19, r24
     2f0:	30 95       	com	r19
     2f2:	23 23       	and	r18, r19
     2f4:	66 23       	and	r22, r22
     2f6:	09 f4       	brne	.+2      	; 0x2fa <CLKSYS_AutoCalibration_Enable+0x14>
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	92 2b       	or	r25, r18
     2fc:	e0 e5       	ldi	r30, 0x50	; 80
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	31 f4       	brne	.+12     	; 0x312 <CLKSYS_AutoCalibration_Enable+0x2c>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
     306:	e8 e6       	ldi	r30, 0x68	; 104
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	81 60       	ori	r24, 0x01	; 1
     30e:	80 83       	st	Z, r24
     310:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	29 f4       	brne	.+10     	; 0x320 <CLKSYS_AutoCalibration_Enable+0x3a>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     316:	e0 e6       	ldi	r30, 0x60	; 96
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	81 60       	ori	r24, 0x01	; 1
     31e:	80 83       	st	Z, r24
     320:	08 95       	ret

00000322 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
     322:	83 e5       	ldi	r24, 0x53	; 83
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	63 e0       	ldi	r22, 0x03	; 3
     328:	0e 94 22 01 	call	0x244	; 0x244 <CCPWrite>
}
     32c:	08 95       	ret

0000032e <CLKSYS_Configuration_Lock>:
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
     32e:	82 e4       	ldi	r24, 0x42	; 66
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	0e 94 22 01 	call	0x244	; 0x244 <CCPWrite>
}
     338:	08 95       	ret

0000033a <AxisInit>:
 */ 

#include "Axis.h"

void AxisInit (volatile AXIS_t * axis)
{
     33a:	fc 01       	movw	r30, r24
	axis->pwm_timer->CTRLA = TC_CLKSEL_DIV1_gc;
     33c:	a0 85       	ldd	r26, Z+8	; 0x08
     33e:	b1 85       	ldd	r27, Z+9	; 0x09
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	2c 93       	st	X, r18
	axis->pwm_timer->CTRLB = TC_WGMODE_SS_gc | axis->compare_mask; /* Single Slope PWM, Top at PER, Output Compares Enabled */
     344:	a0 85       	ldd	r26, Z+8	; 0x08
     346:	b1 85       	ldd	r27, Z+9	; 0x09
     348:	86 89       	ldd	r24, Z+22	; 0x16
     34a:	83 60       	ori	r24, 0x03	; 3
     34c:	11 96       	adiw	r26, 0x01	; 1
     34e:	8c 93       	st	X, r24
	axis->pwm_timer->CTRLD = TC_EVSEL_OFF_gc; /* No Event Action */
     350:	a0 85       	ldd	r26, Z+8	; 0x08
     352:	b1 85       	ldd	r27, Z+9	; 0x09
     354:	13 96       	adiw	r26, 0x03	; 3
     356:	1c 92       	st	X, r1
	axis->pwm_timer->PER = axis->axis_run_power;
     358:	a0 85       	ldd	r26, Z+8	; 0x08
     35a:	b1 85       	ldd	r27, Z+9	; 0x09
     35c:	85 89       	ldd	r24, Z+21	; 0x15
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	96 96       	adiw	r26, 0x26	; 38
     362:	8d 93       	st	X+, r24
     364:	9c 93       	st	X, r25
     366:	97 97       	sbiw	r26, 0x27	; 39
	*axis->phase_pwm_cmp1 = 0;
     368:	a1 89       	ldd	r26, Z+17	; 0x11
     36a:	b2 89       	ldd	r27, Z+18	; 0x12
     36c:	1d 92       	st	X+, r1
     36e:	1c 92       	st	X, r1
	*axis->phase_pwm_cmp2 = 0;
     370:	a3 89       	ldd	r26, Z+19	; 0x13
     372:	b4 89       	ldd	r27, Z+20	; 0x14
     374:	1d 92       	st	X+, r1
     376:	1c 92       	st	X, r1
     378:	11 97       	sbiw	r26, 0x01	; 1
	
	axis->delta = 0;
     37a:	14 82       	std	Z+4, r1	; 0x04
     37c:	15 82       	std	Z+5, r1	; 0x05
     37e:	16 82       	std	Z+6, r1	; 0x06
     380:	17 82       	std	Z+7, r1	; 0x07
	axis->location = 0;
     382:	10 82       	st	Z, r1
     384:	11 82       	std	Z+1, r1	; 0x01
     386:	12 82       	std	Z+2, r1	; 0x02
     388:	13 82       	std	Z+3, r1	; 0x03
	
	axis->state = 0;
     38a:	17 8a       	std	Z+23, r1	; 0x17
	
	axis->can_update_output = true;
     38c:	20 8f       	std	Z+24, r18	; 0x18
	axis->current_location_buffer = 0;
     38e:	11 8e       	std	Z+25, r1	; 0x19
     390:	12 8e       	std	Z+26, r1	; 0x1a
     392:	13 8e       	std	Z+27, r1	; 0x1b
     394:	14 8e       	std	Z+28, r1	; 0x1c
}
     396:	08 95       	ret

00000398 <IsOnLimit>:
	{
		return axis->location;
	}
}
volatile bool IsOnLimit (volatile AXIS_t * a)
{
     398:	fc 01       	movw	r30, r24
	/* TODO: read limit switch pin multiple times */
	return (a->limit_switch_port->IN & a->limit_switch_mask); /* Active high */
     39a:	a2 85       	ldd	r26, Z+10	; 0x0a
     39c:	b3 85       	ldd	r27, Z+11	; 0x0b
     39e:	18 96       	adiw	r26, 0x08	; 8
     3a0:	8c 91       	ld	r24, X
     3a2:	18 97       	sbiw	r26, 0x08	; 8
     3a4:	94 85       	ldd	r25, Z+12	; 0x0c
     3a6:	98 23       	and	r25, r24
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	09 f4       	brne	.+2      	; 0x3ae <IsOnLimit+0x16>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
}
     3ae:	08 95       	ret

000003b0 <IsMoving>:
volatile bool IsMoving (volatile AXIS_t * axis)
{
	/* TODO: Return something reasonable here... */
	return (axis->delta != 0);
     3b0:	fc 01       	movw	r30, r24
     3b2:	44 81       	ldd	r20, Z+4	; 0x04
     3b4:	55 81       	ldd	r21, Z+5	; 0x05
     3b6:	66 81       	ldd	r22, Z+6	; 0x06
     3b8:	77 81       	ldd	r23, Z+7	; 0x07
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	41 15       	cp	r20, r1
     3be:	51 05       	cpc	r21, r1
     3c0:	61 05       	cpc	r22, r1
     3c2:	71 05       	cpc	r23, r1
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <IsMoving+0x18>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
}
     3c8:	08 95       	ret

000003ca <AxisGetCurrentPosition>:
	
	axis->can_update_output = true;
	axis->current_location_buffer = 0;
}
int32_t AxisGetCurrentPosition (volatile AXIS_t * axis)
{
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	ec 01       	movw	r28, r24
	/* If it's moving, use the buffered value for interrupt safe access */
	if (IsMoving(axis))
     3d4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <IsMoving>
     3d8:	88 23       	and	r24, r24
     3da:	41 f0       	breq	.+16     	; 0x3ec <AxisGetCurrentPosition+0x22>
	{
		axis->can_update_output = false;
     3dc:	18 8e       	std	Y+24, r1	; 0x18
		uint32_t return_value = axis->current_location_buffer;
     3de:	09 8d       	ldd	r16, Y+25	; 0x19
     3e0:	1a 8d       	ldd	r17, Y+26	; 0x1a
     3e2:	2b 8d       	ldd	r18, Y+27	; 0x1b
     3e4:	3c 8d       	ldd	r19, Y+28	; 0x1c
		axis->can_update_output = true;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	88 8f       	std	Y+24, r24	; 0x18
		return return_value;
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <AxisGetCurrentPosition+0x2a>
	}
	else
	{
		return axis->location;
     3ec:	08 81       	ld	r16, Y
     3ee:	19 81       	ldd	r17, Y+1	; 0x01
     3f0:	2a 81       	ldd	r18, Y+2	; 0x02
     3f2:	3b 81       	ldd	r19, Y+3	; 0x03
	}
}
     3f4:	60 2f       	mov	r22, r16
     3f6:	71 2f       	mov	r23, r17
     3f8:	82 2f       	mov	r24, r18
     3fa:	93 2f       	mov	r25, r19
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <AxisRun>:
	//axis->delta = location;
	
	/* Update and restart the timers */
	//axis->pwm_timer->PER = axis->axis_run_power;
	//axis->pwm_timer->CTRLFSET = TC_CMD_RESTART_gc;
}
     406:	08 95       	ret

00000408 <AxisStop>:
	//axis->pwm_timer->PER = axis->axis_idle_power;
	//axis->pwm_timer->CTRLFSET = TC_CMD_RESTART_gc;
	
	/* Update the current position buffer */
	//axis->current_location_buffer = axis->location;
}
     408:	08 95       	ret

0000040a <ZeroLocation>:
void ZeroLocation (volatile AXIS_t * axis)
{
     40a:	fc 01       	movw	r30, r24
	AxisStop(axis);
	axis->delta = 0;
     40c:	14 82       	std	Z+4, r1	; 0x04
     40e:	15 82       	std	Z+5, r1	; 0x05
     410:	16 82       	std	Z+6, r1	; 0x06
     412:	17 82       	std	Z+7, r1	; 0x07
	axis->location = 0;
     414:	10 82       	st	Z, r1
     416:	11 82       	std	Z+1, r1	; 0x01
     418:	12 82       	std	Z+2, r1	; 0x02
     41a:	13 82       	std	Z+3, r1	; 0x03
	axis->current_location_buffer = 0;
     41c:	11 8e       	std	Z+25, r1	; 0x19
     41e:	12 8e       	std	Z+26, r1	; 0x1a
     420:	13 8e       	std	Z+27, r1	; 0x1b
     422:	14 8e       	std	Z+28, r1	; 0x1c
}
     424:	08 95       	ret

00000426 <TransmitPacketComplete>:
}

void TransmitPacketComplete (void)
{
	/* Disable DRE interrupts. */
	uint8_t tempCTRLA = USARTC0.CTRLA;
     426:	e0 ea       	ldi	r30, 0xA0	; 160
     428:	f8 e0       	ldi	r31, 0x08	; 8
     42a:	83 81       	ldd	r24, Z+3	; 0x03
	tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     42c:	8c 7f       	andi	r24, 0xFC	; 252
	USARTC0.CTRLA = tempCTRLA;
     42e:	83 83       	std	Z+3, r24	; 0x03
	
	
	// Enable receiver
	//UCSR0B  |= (1<<RXEN0);
	//RS485_SET_INPUT();
}
     430:	08 95       	ret

00000432 <ReceivePacketComplete>:

void ReceivePacketComplete (volatile SerialData * s)
{
	// Check if the address matches
	if (s->receive_address == ADDRESS)
     432:	fc 01       	movw	r30, r24
     434:	85 a9       	sts	0x45, r24
     436:	81 32       	cpi	r24, 0x21	; 33
     438:	19 f4       	brne	.+6      	; 0x440 <ReceivePacketComplete+0xe>
	{
		serialPacketReady = 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 20 20 	sts	0x2020, r24
     440:	08 95       	ret

00000442 <ReceiveDataError>:
	}
}

void ReceiveDataError (byte errCode)
{
}
     442:	08 95       	ret

00000444 <USART_Init>:
}

void USART_Init(void)
{
	// USART Configuration
	PORTC.DIRSET = PIN3_bm;
     444:	e0 e4       	ldi	r30, 0x40	; 64
     446:	f6 e0       	ldi	r31, 0x06	; 6
     448:	88 e0       	ldi	r24, 0x08	; 8
     44a:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	82 83       	std	Z+2, r24	; 0x02
	
	// RX Interrupt Level
	char rxd_int_level = USART_RXCINTLVL_LO_gc;
	

	USARTC0.CTRLA = (USARTC0.CTRLA & ~USART_RXCINTLVL_gm) | rxd_int_level;
     450:	e0 ea       	ldi	r30, 0xA0	; 160
     452:	f8 e0       	ldi	r31, 0x08	; 8
     454:	83 81       	ldd	r24, Z+3	; 0x03
     456:	8f 7c       	andi	r24, 0xCF	; 207
     458:	80 61       	ori	r24, 0x10	; 16
     45a:	83 83       	std	Z+3, r24	; 0x03
	
	// Format Set: 8 data bits, no parity, 1 stop bit
	char two_stop_bits = 0;
	char char_size = USART_CHSIZE_8BIT_gc;
	char parity_mode = USART_PMODE_DISABLED_gc;
	USARTC0.CTRLC = (char_size | parity_mode | (two_stop_bits ? USART_SBMODE_bm : 0));
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	85 83       	std	Z+5, r24	; 0x05
	// BSEL = fper / (16 * BaudRate) - 1
	//                 = 12
	// 
	uint8_t bsel_value = BSEL;
	uint8_t bscale_factor = 0;
	USARTC0.BAUDCTRLA = (uint8_t) bsel_value;
     460:	87 e6       	ldi	r24, 0x67	; 103
     462:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = (bscale_factor << USART_BSCALE0_bp) | (bsel_value >> 8);
     464:	17 82       	std	Z+7, r1	; 0x07
	
	// USART RX enable
	USARTC0.CTRLB |= (USART_RXEN_bm | USART_TXEN_bm);
     466:	84 81       	ldd	r24, Z+4	; 0x04
     468:	88 61       	ori	r24, 0x18	; 24
     46a:	84 83       	std	Z+4, r24	; 0x04
}
     46c:	08 95       	ret

0000046e <SerialInit>:
// For sending and receiving serial packets
SerialData ser;

void SerialInit(void)
{
	SerialDataInitialize(&ser);
     46e:	89 e3       	ldi	r24, 0x39	; 57
     470:	90 e2       	ldi	r25, 0x20	; 32
     472:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SerialDataInitialize>
	
	// Setup function pointers
    ser.TransmitPacketComplete = &TransmitPacketComplete;
     476:	83 e1       	ldi	r24, 0x13	; 19
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	80 93 ac 20 	sts	0x20AC, r24
     47e:	90 93 ad 20 	sts	0x20AD, r25
    ser.Transmit = &Transmit;
     482:	81 e8       	ldi	r24, 0x81	; 129
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	80 93 aa 20 	sts	0x20AA, r24
     48a:	90 93 ab 20 	sts	0x20AB, r25
    ser.ReceivePacketComplete = &ReceivePacketComplete;
     48e:	89 e1       	ldi	r24, 0x19	; 25
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	80 93 ae 20 	sts	0x20AE, r24
     496:	90 93 af 20 	sts	0x20AF, r25
    ser.ReceiveDataError = &ReceiveDataError;
     49a:	81 e2       	ldi	r24, 0x21	; 33
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	80 93 b0 20 	sts	0x20B0, r24
     4a2:	90 93 b1 20 	sts	0x20B1, r25

	USART_Init();
     4a6:	0e 94 22 02 	call	0x444	; 0x444 <USART_Init>
}
     4aa:	08 95       	ret

000004ac <SerialDataTransmitStruct>:
}


SerialData * SerialDataTransmitStruct (void)
{
	if (SerialTransferInProgress (&ser))
     4ac:	89 e3       	ldi	r24, 0x39	; 57
     4ae:	90 e2       	ldi	r25, 0x20	; 32
     4b0:	0e 94 81 04 	call	0x902	; 0x902 <SerialTransferInProgress>
     4b4:	88 23       	and	r24, r24
     4b6:	19 f0       	breq	.+6      	; 0x4be <SerialDataTransmitStruct+0x12>
	{
		return 0;
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <SerialDataTransmitStruct+0x16>
	}
	else
	{
		return &ser;
     4be:	29 e3       	ldi	r18, 0x39	; 57
     4c0:	30 e2       	ldi	r19, 0x20	; 32
	}
}
     4c2:	82 2f       	mov	r24, r18
     4c4:	93 2f       	mov	r25, r19
     4c6:	08 95       	ret

000004c8 <SerialDataAvailable>:

SerialData * SerialDataAvailable (void)
{
	if (serialPacketReady != 0)
     4c8:	80 91 20 20 	lds	r24, 0x2020
     4cc:	88 23       	and	r24, r24
     4ce:	29 f0       	breq	.+10     	; 0x4da <SerialDataAvailable+0x12>
	{
		serialPacketReady = 0;
     4d0:	10 92 20 20 	sts	0x2020, r1
		return &ser;
     4d4:	29 e3       	ldi	r18, 0x39	; 57
     4d6:	30 e2       	ldi	r19, 0x20	; 32
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <SerialDataAvailable+0x16>
	}
	else
	{
		return 0;
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
	}
}
     4de:	82 2f       	mov	r24, r18
     4e0:	93 2f       	mov	r25, r19
     4e2:	08 95       	ret

000004e4 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	// Wait for empty transmit buffer
	while((USARTC0.STATUS & USART_DREIF_bm) == 0) {} 
     4e4:	e0 ea       	ldi	r30, 0xA0	; 160
     4e6:	f8 e0       	ldi	r31, 0x08	; 8
     4e8:	91 81       	ldd	r25, Z+1	; 0x01
     4ea:	95 ff       	sbrs	r25, 5
     4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <USART_Transmit+0x4>

	USARTC0.DATA = data;
     4ee:	e0 ea       	ldi	r30, 0xA0	; 160
     4f0:	f8 e0       	ldi	r31, 0x08	; 8
     4f2:	80 83       	st	Z, r24
		
	/* Enable DRE interrupt if not already enabled. */
	uint8_t tempCTRLA = USARTC0.CTRLA;
     4f4:	83 81       	ldd	r24, Z+3	; 0x03
	if (!(tempCTRLA & USART_TXCINTLVL_LO_gc))
     4f6:	82 fd       	sbrc	r24, 2
     4f8:	03 c0       	rjmp	.+6      	; 0x500 <USART_Transmit+0x1c>
	{
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_LO_gc;
     4fa:	8c 7f       	andi	r24, 0xFC	; 252
     4fc:	81 60       	ori	r24, 0x01	; 1
		USARTC0.CTRLA = tempCTRLA;
     4fe:	83 83       	std	Z+3, r24	; 0x03
     500:	08 95       	ret

00000502 <Transmit>:
	//{
		// Disable Receiver
	//	UCSR0B &= ~(1<<RXEN0);
//		RS485_SET_OUTPUT();
	//}
	USART_Transmit (data);
     502:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_Transmit>
}
     506:	08 95       	ret

00000508 <__vector_25>:
	
}

// USART Receive Interrupt
ISR (USARTC0_RXC_vect)
{
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	08 b6       	in	r0, 0x38	; 56
     512:	0f 92       	push	r0
     514:	09 b6       	in	r0, 0x39	; 57
     516:	0f 92       	push	r0
     518:	0b b6       	in	r0, 0x3b	; 59
     51a:	0f 92       	push	r0
     51c:	11 24       	eor	r1, r1
     51e:	18 be       	out	0x38, r1	; 56
     520:	19 be       	out	0x39, r1	; 57
     522:	1b be       	out	0x3b, r1	; 59
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
	//uint8_t data = UDR0;
	uint8_t data = USARTC0.DATA;
     53c:	60 91 a0 08 	lds	r22, 0x08A0
	ProcessDataChar (&ser, data); // 6-12 uS
     540:	89 e3       	ldi	r24, 0x39	; 57
     542:	90 e2       	ldi	r25, 0x20	; 32
     544:	0e 94 87 03 	call	0x70e	; 0x70e <ProcessDataChar>
}
     548:	ff 91       	pop	r31
     54a:	ef 91       	pop	r30
     54c:	bf 91       	pop	r27
     54e:	af 91       	pop	r26
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	7f 91       	pop	r23
     556:	6f 91       	pop	r22
     558:	5f 91       	pop	r21
     55a:	4f 91       	pop	r20
     55c:	3f 91       	pop	r19
     55e:	2f 91       	pop	r18
     560:	0f 90       	pop	r0
     562:	0b be       	out	0x3b, r0	; 59
     564:	0f 90       	pop	r0
     566:	09 be       	out	0x39, r0	; 57
     568:	0f 90       	pop	r0
     56a:	08 be       	out	0x38, r0	; 56
     56c:	0f 90       	pop	r0
     56e:	0f be       	out	0x3f, r0	; 63
     570:	0f 90       	pop	r0
     572:	1f 90       	pop	r1
     574:	18 95       	reti

00000576 <__vector_26>:

// USART Transmit Complete (Data Register Empty)
ISR (USARTC0_DRE_vect) 
{
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	08 b6       	in	r0, 0x38	; 56
     580:	0f 92       	push	r0
     582:	09 b6       	in	r0, 0x39	; 57
     584:	0f 92       	push	r0
     586:	0b b6       	in	r0, 0x3b	; 59
     588:	0f 92       	push	r0
     58a:	11 24       	eor	r1, r1
     58c:	18 be       	out	0x38, r1	; 56
     58e:	19 be       	out	0x39, r1	; 57
     590:	1b be       	out	0x3b, r1	; 59
     592:	2f 93       	push	r18
     594:	3f 93       	push	r19
     596:	4f 93       	push	r20
     598:	5f 93       	push	r21
     59a:	6f 93       	push	r22
     59c:	7f 93       	push	r23
     59e:	8f 93       	push	r24
     5a0:	9f 93       	push	r25
     5a2:	af 93       	push	r26
     5a4:	bf 93       	push	r27
     5a6:	ef 93       	push	r30
     5a8:	ff 93       	push	r31
	// Disable the DRE interrupt
    //USART_DataRegEmpty( &USART_data );
	//uint8_t d = USARTC0.DATA;
	// Send out the next byte
	SerialByteTransmitComplete (&ser); // 6 uS
     5aa:	89 e3       	ldi	r24, 0x39	; 57
     5ac:	90 e2       	ldi	r25, 0x20	; 32
     5ae:	0e 94 cb 03 	call	0x796	; 0x796 <SerialByteTransmitComplete>
     5b2:	ff 91       	pop	r31
     5b4:	ef 91       	pop	r30
     5b6:	bf 91       	pop	r27
     5b8:	af 91       	pop	r26
     5ba:	9f 91       	pop	r25
     5bc:	8f 91       	pop	r24
     5be:	7f 91       	pop	r23
     5c0:	6f 91       	pop	r22
     5c2:	5f 91       	pop	r21
     5c4:	4f 91       	pop	r20
     5c6:	3f 91       	pop	r19
     5c8:	2f 91       	pop	r18
     5ca:	0f 90       	pop	r0
     5cc:	0b be       	out	0x3b, r0	; 59
     5ce:	0f 90       	pop	r0
     5d0:	09 be       	out	0x39, r0	; 57
     5d2:	0f 90       	pop	r0
     5d4:	08 be       	out	0x38, r0	; 56
     5d6:	0f 90       	pop	r0
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	0f 90       	pop	r0
     5dc:	1f 90       	pop	r1
     5de:	18 95       	reti

000005e0 <SerialError>:
 * Helper Function: Distribute error codes to
 * handling functions, if they exist.
 */
void SerialError(volatile SerialData *s, byte errCode)
{
    if (s->ReceiveDataError!=0)
     5e0:	fc 01       	movw	r30, r24
     5e2:	e9 58       	subi	r30, 0x89	; 137
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	40 81       	ld	r20, Z
     5e8:	51 81       	ldd	r21, Z+1	; 0x01
     5ea:	41 15       	cp	r20, r1
     5ec:	51 05       	cpc	r21, r1
     5ee:	29 f0       	breq	.+10     	; 0x5fa <SerialError+0x1a>
    {
        s->ReceiveDataError(errCode);
     5f0:	01 90       	ld	r0, Z+
     5f2:	f0 81       	ld	r31, Z
     5f4:	e0 2d       	mov	r30, r0
     5f6:	86 2f       	mov	r24, r22
     5f8:	19 95       	eicall
     5fa:	08 95       	ret

000005fc <SerialDataInitialize>:
/**
 * Initialize the serial data structure.
 * Call once before any other methods.
 */
void SerialDataInitialize(volatile SerialData * s)
{
     5fc:	fc 01       	movw	r30, r24
    /* Receive State Variables */
    s->receive_state = PROC_STATE_AWAITING_START_BYTE;
     5fe:	17 aa       	sts	0x97, r17
    s->receive_next_char_is_escaped = false;
     600:	14 aa       	sts	0x94, r17

    /* Function Pointers */
    s->Transmit = 0;
     602:	dc 01       	movw	r26, r24
     604:	af 58       	subi	r26, 0x8F	; 143
     606:	bf 4f       	sbci	r27, 0xFF	; 255
     608:	1d 92       	st	X+, r1
     60a:	1c 92       	st	X, r1
     60c:	11 97       	sbiw	r26, 0x01	; 1
    s->TransmitPacketComplete = 0;
     60e:	dc 01       	movw	r26, r24
     610:	ad 58       	subi	r26, 0x8D	; 141
     612:	bf 4f       	sbci	r27, 0xFF	; 255
     614:	1d 92       	st	X+, r1
     616:	1c 92       	st	X, r1
     618:	11 97       	sbiw	r26, 0x01	; 1
    s->ReceivePacketComplete = 0;
     61a:	dc 01       	movw	r26, r24
     61c:	ab 58       	subi	r26, 0x8B	; 139
     61e:	bf 4f       	sbci	r27, 0xFF	; 255
     620:	1d 92       	st	X+, r1
     622:	1c 92       	st	X, r1
     624:	11 97       	sbiw	r26, 0x01	; 1
    s->ReceiveDataError = 0;
     626:	dc 01       	movw	r26, r24
     628:	a9 58       	subi	r26, 0x89	; 137
     62a:	bf 4f       	sbci	r27, 0xFF	; 255
     62c:	1d 92       	st	X+, r1
     62e:	1c 92       	st	X, r1
     630:	11 97       	sbiw	r26, 0x01	; 1

    /* Transmit State Variables */
    s->transmit_state = PROC_STATE_TRANSMIT_COMPLETE;
     632:	dc 01       	movw	r26, r24
     634:	a6 59       	subi	r26, 0x96	; 150
     636:	bf 4f       	sbci	r27, 0xFF	; 255
     638:	84 e1       	ldi	r24, 0x14	; 20
     63a:	8c 93       	st	X, r24
    s->transmit_address = 0;
     63c:	df 01       	movw	r26, r30
     63e:	a5 59       	subi	r26, 0x95	; 149
     640:	bf 4f       	sbci	r27, 0xFF	; 255
     642:	1c 92       	st	X, r1
    s->transmit_length = 0;
     644:	df 01       	movw	r26, r30
     646:	a4 59       	subi	r26, 0x94	; 148
     648:	bf 4f       	sbci	r27, 0xFF	; 255
     64a:	1c 92       	st	X, r1
    s->transmit_checksum = 0;
     64c:	df 01       	movw	r26, r30
     64e:	a3 59       	subi	r26, 0x93	; 147
     650:	bf 4f       	sbci	r27, 0xFF	; 255
     652:	1c 92       	st	X, r1
    s->transmit_data_ptr = 0;
     654:	e1 59       	subi	r30, 0x91	; 145
     656:	ff 4f       	sbci	r31, 0xFF	; 255
     658:	10 82       	st	Z, r1
     65a:	11 82       	std	Z+1, r1	; 0x01

}
     65c:	08 95       	ret

0000065e <SerialStateMachineProcess>:
        }
    }
}

void SerialStateMachineProcess(volatile SerialData *s, byte data)
{
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	ec 01       	movw	r28, r24
    switch (s->receive_state)
     664:	8f a9       	sts	0x4f, r24
     666:	82 30       	cpi	r24, 0x02	; 2
     668:	89 f0       	breq	.+34     	; 0x68c <SerialStateMachineProcess+0x2e>
     66a:	83 30       	cpi	r24, 0x03	; 3
     66c:	20 f4       	brcc	.+8      	; 0x676 <SerialStateMachineProcess+0x18>
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	09 f0       	breq	.+2      	; 0x674 <SerialStateMachineProcess+0x16>
     672:	4a c0       	rjmp	.+148    	; 0x708 <SerialStateMachineProcess+0xaa>
     674:	06 c0       	rjmp	.+12     	; 0x682 <SerialStateMachineProcess+0x24>
     676:	83 30       	cpi	r24, 0x03	; 3
     678:	c1 f0       	breq	.+48     	; 0x6aa <SerialStateMachineProcess+0x4c>
     67a:	84 30       	cpi	r24, 0x04	; 4
     67c:	09 f0       	breq	.+2      	; 0x680 <SerialStateMachineProcess+0x22>
     67e:	44 c0       	rjmp	.+136    	; 0x708 <SerialStateMachineProcess+0xaa>
     680:	28 c0       	rjmp	.+80     	; 0x6d2 <SerialStateMachineProcess+0x74>
    {
        case PROC_STATE_AWAITING_ADDRESS:
            s->receive_address = data;
     682:	6d ab       	sts	0x5d, r22
            s->receive_checksum = data;
     684:	6e ab       	sts	0x5e, r22
            s->receive_state = PROC_STATE_AWAITING_LENGTH;
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	8f ab       	sts	0x5f, r24
        break;
     68a:	3e c0       	rjmp	.+124    	; 0x708 <SerialStateMachineProcess+0xaa>

        case PROC_STATE_AWAITING_LENGTH:
            if (data > SERIAL_RECEIVE_BUFFER_SIZE)
     68c:	63 33       	cpi	r22, 0x33	; 51
     68e:	30 f0       	brcs	.+12     	; 0x69c <SerialStateMachineProcess+0x3e>
            {
                /* Error, length too long.  Ignore packet. */
                s->receive_state = PROC_STATE_AWAITING_START_BYTE;
     690:	1f aa       	sts	0x9f, r17

                /* Look for the next start byte.  Note: this
                 * will likey produce unexpected start byte errors.
                 */
                SerialError(s, ERR_EXCESSIVE_PACKET_LENGTH);
     692:	ce 01       	movw	r24, r28
     694:	64 e0       	ldi	r22, 0x04	; 4
     696:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SerialError>
     69a:	36 c0       	rjmp	.+108    	; 0x708 <SerialStateMachineProcess+0xaa>
            }
            else
            {
                s->receive_length = data;
     69c:	6b ab       	sts	0x5b, r22
                s->receive_checksum += data;
     69e:	8e a9       	sts	0x4e, r24
     6a0:	68 0f       	add	r22, r24
     6a2:	6e ab       	sts	0x5e, r22
                s->receive_state = PROC_STATE_AWAITING_DATA;
     6a4:	83 e0       	ldi	r24, 0x03	; 3
     6a6:	8f ab       	sts	0x5f, r24
     6a8:	2f c0       	rjmp	.+94     	; 0x708 <SerialStateMachineProcess+0xaa>
            }
        break;

        case PROC_STATE_AWAITING_DATA:

            s->receive_length--;
     6aa:	8b a9       	sts	0x4b, r24
     6ac:	81 50       	subi	r24, 0x01	; 1
     6ae:	8b ab       	sts	0x5b, r24

            s->receive_checksum += data;
     6b0:	8e a9       	sts	0x4e, r24
     6b2:	86 0f       	add	r24, r22
     6b4:	8e ab       	sts	0x5e, r24
            s->receive_data[s->receive_data_count] = data;
     6b6:	8a a9       	sts	0x4a, r24
     6b8:	fe 01       	movw	r30, r28
     6ba:	e8 0f       	add	r30, r24
     6bc:	f1 1d       	adc	r31, r1
     6be:	60 83       	st	Z, r22
            s->receive_data_count++;
     6c0:	8a a9       	sts	0x4a, r24
     6c2:	8f 5f       	subi	r24, 0xFF	; 255
     6c4:	8a ab       	sts	0x5a, r24

            if (s->receive_length == 0)
     6c6:	8b a9       	sts	0x4b, r24
     6c8:	88 23       	and	r24, r24
     6ca:	f1 f4       	brne	.+60     	; 0x708 <SerialStateMachineProcess+0xaa>
            {
                s->receive_state = PROC_STATE_AWAITING_CHECKSUM;
     6cc:	84 e0       	ldi	r24, 0x04	; 4
     6ce:	8f ab       	sts	0x5f, r24
     6d0:	1b c0       	rjmp	.+54     	; 0x708 <SerialStateMachineProcess+0xaa>
            }

        break;

        case PROC_STATE_AWAITING_CHECKSUM:
            s->receive_checksum = ~s->receive_checksum;
     6d2:	8e a9       	sts	0x4e, r24
     6d4:	80 95       	com	r24
     6d6:	8e ab       	sts	0x5e, r24
            if (data == s->receive_checksum)
     6d8:	8e a9       	sts	0x4e, r24
     6da:	86 17       	cp	r24, r22
     6dc:	81 f4       	brne	.+32     	; 0x6fe <SerialStateMachineProcess+0xa0>
            {
                if (s->ReceivePacketComplete != 0)
     6de:	fe 01       	movw	r30, r28
     6e0:	eb 58       	subi	r30, 0x8B	; 139
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	69 f0       	breq	.+26     	; 0x706 <SerialStateMachineProcess+0xa8>
                {
                    s->ReceivePacketComplete (s);
     6ec:	fe 01       	movw	r30, r28
     6ee:	eb 58       	subi	r30, 0x8B	; 139
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	01 90       	ld	r0, Z+
     6f4:	f0 81       	ld	r31, Z
     6f6:	e0 2d       	mov	r30, r0
     6f8:	ce 01       	movw	r24, r28
     6fa:	19 95       	eicall
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <SerialStateMachineProcess+0xa8>
                }
            }
            else
            {
                SerialError(s, ERR_CHECKSUM_MISMATCH);
     6fe:	ce 01       	movw	r24, r28
     700:	65 e0       	ldi	r22, 0x05	; 5
     702:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SerialError>
                //printf("Error: Checksum Mismatch.  Expected 0x%x, Got 0x%x\n", s->receive_checksum, data);
            }
            s->receive_state = PROC_STATE_AWAITING_START_BYTE;
     706:	1f aa       	sts	0x9f, r17

        default:
            // (It'll never get here)
        break;
    }
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <ProcessDataChar>:
/** Processes a character from a serial stream
 * and reconstructs packets.
 * @param data The next character in the stream
 */
void ProcessDataChar (volatile SerialData * s, byte data)
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	ec 01       	movw	r28, r24

    /* See if the data received is value to ignore
     * This most likely occurs in conjunction with
     * a frame error: start byte detected, but no
     * valid data afterwards. */
    if (data == NULL_BYTE || data == MAX_BYTE)
     714:	86 2f       	mov	r24, r22
     716:	81 50       	subi	r24, 0x01	; 1
     718:	8e 3f       	cpi	r24, 0xFE	; 254
     71a:	28 f0       	brcs	.+10     	; 0x726 <ProcessDataChar+0x18>
    {
        SerialError(s, ERR_RECEIVED_IGNORE_BYTE);
     71c:	ce 01       	movw	r24, r28
     71e:	67 e0       	ldi	r22, 0x07	; 7
     720:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SerialError>
        return;
     724:	35 c0       	rjmp	.+106    	; 0x790 <ProcessDataChar+0x82>

    /* If any start byte is found, any current data
     * transfer will be reset, and a new data transfer
     * will begin.
     */
    if (data == START_BYTE) /* Start byte */
     726:	6a 3c       	cpi	r22, 0xCA	; 202
     728:	61 f4       	brne	.+24     	; 0x742 <ProcessDataChar+0x34>
    {
        if (s->receive_state != PROC_STATE_AWAITING_START_BYTE)
     72a:	8f a9       	sts	0x4f, r24
     72c:	88 23       	and	r24, r24
     72e:	21 f0       	breq	.+8      	; 0x738 <ProcessDataChar+0x2a>
        {
            SerialError(s, ERR_START_BYTE_INSIDE_PACKET);
     730:	ce 01       	movw	r24, r28
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SerialError>
        }

        /* Reset state */
        s->receive_state = PROC_STATE_AWAITING_ADDRESS;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	8f ab       	sts	0x5f, r24
        s->receive_data_count = 0;
     73c:	1a aa       	sts	0x9a, r17
        s->receive_next_char_is_escaped = false;
     73e:	1c aa       	sts	0x9c, r17
     740:	27 c0       	rjmp	.+78     	; 0x790 <ProcessDataChar+0x82>
    }
    else
    {
        if (s->receive_state == PROC_STATE_AWAITING_START_BYTE)
     742:	8f a9       	sts	0x4f, r24
     744:	88 23       	and	r24, r24
     746:	29 f4       	brne	.+10     	; 0x752 <ProcessDataChar+0x44>
        {
            SerialError(s, ERR_UNEXPECTED_START_BYTE);
     748:	ce 01       	movw	r24, r28
     74a:	62 e0       	ldi	r22, 0x02	; 2
     74c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SerialError>
     750:	1f c0       	rjmp	.+62     	; 0x790 <ProcessDataChar+0x82>
            //printf("Unexpected Start Byte: Expected 0x%x, Got 0x%x\n", START_BYTE, data);
        }
        else
        {
            /* Otherwise, unstuff bytes and send data to the state machine */
            if (data == ESCAPE_CHAR) // Escape Character
     752:	6c 35       	cpi	r22, 0x5C	; 92
     754:	19 f4       	brne	.+6      	; 0x75c <ProcessDataChar+0x4e>
            {
                s->receive_next_char_is_escaped = true;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	8c ab       	sts	0x5c, r24
     75a:	1a c0       	rjmp	.+52     	; 0x790 <ProcessDataChar+0x82>
            }
            else
            {
                if (s->receive_next_char_is_escaped)
     75c:	8c a9       	sts	0x4c, r24
     75e:	88 23       	and	r24, r24
     760:	a1 f0       	breq	.+40     	; 0x78a <ProcessDataChar+0x7c>
                {
                    s->receive_next_char_is_escaped = false;
     762:	1c aa       	sts	0x9c, r17
                    switch (data)
     764:	63 30       	cpi	r22, 0x03	; 3
     766:	81 f0       	breq	.+32     	; 0x788 <ProcessDataChar+0x7a>
     768:	64 30       	cpi	r22, 0x04	; 4
     76a:	18 f4       	brcc	.+6      	; 0x772 <ProcessDataChar+0x64>
     76c:	62 30       	cpi	r22, 0x02	; 2
     76e:	69 f4       	brne	.+26     	; 0x78a <ProcessDataChar+0x7c>
     770:	05 c0       	rjmp	.+10     	; 0x77c <ProcessDataChar+0x6e>
     772:	64 30       	cpi	r22, 0x04	; 4
     774:	29 f0       	breq	.+10     	; 0x780 <ProcessDataChar+0x72>
     776:	65 30       	cpi	r22, 0x05	; 5
     778:	41 f4       	brne	.+16     	; 0x78a <ProcessDataChar+0x7c>
     77a:	04 c0       	rjmp	.+8      	; 0x784 <ProcessDataChar+0x76>
                        case ESCAPE_CHAR_ESCAPED:
                            data = ESCAPE_CHAR;
                        break;

                        case START_BYTE_ESCAPED:
                            data = START_BYTE;
     77c:	6a ec       	ldi	r22, 0xCA	; 202
                        break;
     77e:	05 c0       	rjmp	.+10     	; 0x78a <ProcessDataChar+0x7c>

                        case NULL_BYTE_ESCAPED:
                            data = NULL_BYTE;
     780:	60 e0       	ldi	r22, 0x00	; 0
                        break;
     782:	03 c0       	rjmp	.+6      	; 0x78a <ProcessDataChar+0x7c>

                        case MAX_BYTE_ESCAPED:
                            data = MAX_BYTE;
     784:	6f ef       	ldi	r22, 0xFF	; 255
                        break;
     786:	01 c0       	rjmp	.+2      	; 0x78a <ProcessDataChar+0x7c>
                {
                    s->receive_next_char_is_escaped = false;
                    switch (data)
                    {
                        case ESCAPE_CHAR_ESCAPED:
                            data = ESCAPE_CHAR;
     788:	6c e5       	ldi	r22, 0x5C	; 92
                        case MAX_BYTE_ESCAPED:
                            data = MAX_BYTE;
                        break;
                    }
                }
                SerialStateMachineProcess(s, data);
     78a:	ce 01       	movw	r24, r28
     78c:	0e 94 2f 03 	call	0x65e	; 0x65e <SerialStateMachineProcess>
            }
        }
    }
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <SerialByteTransmitComplete>:

/** Call this method on USART data
 * transmit complete.
 */
void SerialByteTransmitComplete(volatile SerialData * s)
{
     796:	9c 01       	movw	r18, r24
    byte dataToTx = 0;

    // Check if we need to transmit an escaped character:
    if (s->transmit_escaped_char != 0)
     798:	fc 01       	movw	r30, r24
     79a:	e2 59       	subi	r30, 0x92	; 146
     79c:	ff 4f       	sbci	r31, 0xFF	; 255
     79e:	80 81       	ld	r24, Z
     7a0:	88 23       	and	r24, r24
     7a2:	31 f0       	breq	.+12     	; 0x7b0 <SerialByteTransmitComplete+0x1a>
    {
        dataToTx = s->transmit_escaped_char;
     7a4:	f9 01       	movw	r30, r18
     7a6:	e2 59       	subi	r30, 0x92	; 146
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	80 81       	ld	r24, Z
        s->transmit_escaped_char = 0;
     7ac:	10 82       	st	Z, r1
     7ae:	9c c0       	rjmp	.+312    	; 0x8e8 <SerialByteTransmitComplete+0x152>

    }
    else
    {
        switch (s->transmit_state)
     7b0:	f9 01       	movw	r30, r18
     7b2:	e6 59       	subi	r30, 0x96	; 150
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	80 81       	ld	r24, Z
     7b8:	81 31       	cpi	r24, 0x11	; 17
     7ba:	69 f1       	breq	.+90     	; 0x816 <SerialByteTransmitComplete+0x80>
     7bc:	82 31       	cpi	r24, 0x12	; 18
     7be:	30 f4       	brcc	.+12     	; 0x7cc <SerialByteTransmitComplete+0x36>
     7c0:	8f 30       	cpi	r24, 0x0F	; 15
     7c2:	59 f0       	breq	.+22     	; 0x7da <SerialByteTransmitComplete+0x44>
     7c4:	80 31       	cpi	r24, 0x10	; 16
     7c6:	09 f0       	breq	.+2      	; 0x7ca <SerialByteTransmitComplete+0x34>
     7c8:	63 c0       	rjmp	.+198    	; 0x890 <SerialByteTransmitComplete+0xfa>
     7ca:	15 c0       	rjmp	.+42     	; 0x7f6 <SerialByteTransmitComplete+0x60>
     7cc:	82 31       	cpi	r24, 0x12	; 18
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <SerialByteTransmitComplete+0x3c>
     7d0:	43 c0       	rjmp	.+134    	; 0x858 <SerialByteTransmitComplete+0xc2>
     7d2:	83 31       	cpi	r24, 0x13	; 19
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <SerialByteTransmitComplete+0x42>
     7d6:	5c c0       	rjmp	.+184    	; 0x890 <SerialByteTransmitComplete+0xfa>
     7d8:	4a c0       	rjmp	.+148    	; 0x86e <SerialByteTransmitComplete+0xd8>
        {
            case PROC_STATE_TRANSMIT_ADDRESS:
                dataToTx = s->transmit_address;
     7da:	f9 01       	movw	r30, r18
     7dc:	e5 59       	subi	r30, 0x95	; 149
     7de:	ff 4f       	sbci	r31, 0xFF	; 255
     7e0:	80 81       	ld	r24, Z
                s->transmit_checksum = dataToTx;
     7e2:	f9 01       	movw	r30, r18
     7e4:	e3 59       	subi	r30, 0x93	; 147
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	80 83       	st	Z, r24
                s->transmit_state = PROC_STATE_TRANSMIT_LENGTH;
     7ea:	f9 01       	movw	r30, r18
     7ec:	e6 59       	subi	r30, 0x96	; 150
     7ee:	ff 4f       	sbci	r31, 0xFF	; 255
     7f0:	90 e1       	ldi	r25, 0x10	; 16
     7f2:	90 83       	st	Z, r25
            break;
     7f4:	4e c0       	rjmp	.+156    	; 0x892 <SerialByteTransmitComplete+0xfc>

            case PROC_STATE_TRANSMIT_LENGTH:
                dataToTx = s->transmit_length;
     7f6:	f9 01       	movw	r30, r18
     7f8:	e4 59       	subi	r30, 0x94	; 148
     7fa:	ff 4f       	sbci	r31, 0xFF	; 255
     7fc:	80 81       	ld	r24, Z
                s->transmit_checksum += dataToTx;
     7fe:	f9 01       	movw	r30, r18
     800:	e3 59       	subi	r30, 0x93	; 147
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	90 81       	ld	r25, Z
     806:	98 0f       	add	r25, r24
     808:	90 83       	st	Z, r25
                s->transmit_state = PROC_STATE_TRANSMIT_DATA;
     80a:	f9 01       	movw	r30, r18
     80c:	e6 59       	subi	r30, 0x96	; 150
     80e:	ff 4f       	sbci	r31, 0xFF	; 255
     810:	91 e1       	ldi	r25, 0x11	; 17
     812:	90 83       	st	Z, r25
            break;
     814:	3e c0       	rjmp	.+124    	; 0x892 <SerialByteTransmitComplete+0xfc>

            case PROC_STATE_TRANSMIT_DATA:
                dataToTx = *(s->transmit_data_ptr);
     816:	f9 01       	movw	r30, r18
     818:	e1 59       	subi	r30, 0x91	; 145
     81a:	ff 4f       	sbci	r31, 0xFF	; 255
     81c:	a0 81       	ld	r26, Z
     81e:	b1 81       	ldd	r27, Z+1	; 0x01
     820:	8c 91       	ld	r24, X
                s->transmit_checksum += dataToTx;
     822:	d9 01       	movw	r26, r18
     824:	a3 59       	subi	r26, 0x93	; 147
     826:	bf 4f       	sbci	r27, 0xFF	; 255
     828:	9c 91       	ld	r25, X
     82a:	98 0f       	add	r25, r24
     82c:	9c 93       	st	X, r25
                s->transmit_data_ptr++;
     82e:	40 81       	ld	r20, Z
     830:	51 81       	ldd	r21, Z+1	; 0x01
     832:	4f 5f       	subi	r20, 0xFF	; 255
     834:	5f 4f       	sbci	r21, 0xFF	; 255
     836:	40 83       	st	Z, r20
     838:	51 83       	std	Z+1, r21	; 0x01
                s->transmit_length--;
     83a:	f9 01       	movw	r30, r18
     83c:	e4 59       	subi	r30, 0x94	; 148
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	90 81       	ld	r25, Z
     842:	91 50       	subi	r25, 0x01	; 1
     844:	90 83       	st	Z, r25
                if (s->transmit_length == 0)
     846:	90 81       	ld	r25, Z
     848:	99 23       	and	r25, r25
     84a:	19 f5       	brne	.+70     	; 0x892 <SerialByteTransmitComplete+0xfc>
                {
                    s->transmit_state = PROC_STATE_TRANSMIT_CHECKSUM;
     84c:	f9 01       	movw	r30, r18
     84e:	e6 59       	subi	r30, 0x96	; 150
     850:	ff 4f       	sbci	r31, 0xFF	; 255
     852:	92 e1       	ldi	r25, 0x12	; 18
     854:	90 83       	st	Z, r25
     856:	1d c0       	rjmp	.+58     	; 0x892 <SerialByteTransmitComplete+0xfc>
                }
            break;

            case PROC_STATE_TRANSMIT_CHECKSUM:
                dataToTx = ~s->transmit_checksum;
     858:	f9 01       	movw	r30, r18
     85a:	e3 59       	subi	r30, 0x93	; 147
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	80 81       	ld	r24, Z
     860:	80 95       	com	r24
                s->transmit_state = PROC_STATE_TRANSMIT_ALMOST_COMPLETE;
     862:	f9 01       	movw	r30, r18
     864:	e6 59       	subi	r30, 0x96	; 150
     866:	ff 4f       	sbci	r31, 0xFF	; 255
     868:	93 e1       	ldi	r25, 0x13	; 19
     86a:	90 83       	st	Z, r25
            break;
     86c:	12 c0       	rjmp	.+36     	; 0x892 <SerialByteTransmitComplete+0xfc>

            case PROC_STATE_TRANSMIT_ALMOST_COMPLETE:
                // Done transmitting!
                s->transmit_state = PROC_STATE_TRANSMIT_COMPLETE;
     86e:	f9 01       	movw	r30, r18
     870:	e6 59       	subi	r30, 0x96	; 150
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	84 e1       	ldi	r24, 0x14	; 20
     876:	80 83       	st	Z, r24
                if (s->TransmitPacketComplete!=0)
     878:	f9 01       	movw	r30, r18
     87a:	ed 58       	subi	r30, 0x8D	; 141
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	80 81       	ld	r24, Z
     880:	91 81       	ldd	r25, Z+1	; 0x01
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	e9 f1       	breq	.+122    	; 0x900 <SerialByteTransmitComplete+0x16a>
                {
                    s->TransmitPacketComplete();
     886:	01 90       	ld	r0, Z+
     888:	f0 81       	ld	r31, Z
     88a:	e0 2d       	mov	r30, r0
     88c:	19 95       	eicall
     88e:	08 95       	ret
/** Call this method on USART data
 * transmit complete.
 */
void SerialByteTransmitComplete(volatile SerialData * s)
{
    byte dataToTx = 0;
     890:	80 e0       	ldi	r24, 0x00	; 0
                // Shouldn't ever get here.
            break;
        }

        // Check for control characters
        switch(dataToTx)
     892:	8c 35       	cpi	r24, 0x5C	; 92
     894:	89 f0       	breq	.+34     	; 0x8b8 <SerialByteTransmitComplete+0x122>
     896:	8d 35       	cpi	r24, 0x5D	; 93
     898:	18 f4       	brcc	.+6      	; 0x8a0 <SerialByteTransmitComplete+0x10a>
     89a:	88 23       	and	r24, r24
     89c:	99 f0       	breq	.+38     	; 0x8c4 <SerialByteTransmitComplete+0x12e>
     89e:	20 c0       	rjmp	.+64     	; 0x8e0 <SerialByteTransmitComplete+0x14a>
     8a0:	8a 3c       	cpi	r24, 0xCA	; 202
     8a2:	19 f0       	breq	.+6      	; 0x8aa <SerialByteTransmitComplete+0x114>
     8a4:	8f 3f       	cpi	r24, 0xFF	; 255
     8a6:	e1 f4       	brne	.+56     	; 0x8e0 <SerialByteTransmitComplete+0x14a>
     8a8:	14 c0       	rjmp	.+40     	; 0x8d2 <SerialByteTransmitComplete+0x13c>
        {
            case START_BYTE:
                s->transmit_escaped_char = START_BYTE_ESCAPED;
     8aa:	f9 01       	movw	r30, r18
     8ac:	e2 59       	subi	r30, 0x92	; 146
     8ae:	ff 4f       	sbci	r31, 0xFF	; 255
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	80 83       	st	Z, r24
                dataToTx = ESCAPE_CHAR;
     8b4:	8c e5       	ldi	r24, 0x5C	; 92
            break;
     8b6:	18 c0       	rjmp	.+48     	; 0x8e8 <SerialByteTransmitComplete+0x152>

            case ESCAPE_CHAR:
                s->transmit_escaped_char = ESCAPE_CHAR_ESCAPED;
     8b8:	f9 01       	movw	r30, r18
     8ba:	e2 59       	subi	r30, 0x92	; 146
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	90 83       	st	Z, r25
                dataToTx = ESCAPE_CHAR;
            break;
     8c2:	12 c0       	rjmp	.+36     	; 0x8e8 <SerialByteTransmitComplete+0x152>

            case NULL_BYTE:
                s->transmit_escaped_char = NULL_BYTE_ESCAPED;
     8c4:	f9 01       	movw	r30, r18
     8c6:	e2 59       	subi	r30, 0x92	; 146
     8c8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ca:	84 e0       	ldi	r24, 0x04	; 4
     8cc:	80 83       	st	Z, r24
                dataToTx = ESCAPE_CHAR;
     8ce:	8c e5       	ldi	r24, 0x5C	; 92
            break;
     8d0:	0b c0       	rjmp	.+22     	; 0x8e8 <SerialByteTransmitComplete+0x152>

            case MAX_BYTE:
                s->transmit_escaped_char = MAX_BYTE_ESCAPED;
     8d2:	f9 01       	movw	r30, r18
     8d4:	e2 59       	subi	r30, 0x92	; 146
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	85 e0       	ldi	r24, 0x05	; 5
     8da:	80 83       	st	Z, r24
                dataToTx = ESCAPE_CHAR;
     8dc:	8c e5       	ldi	r24, 0x5C	; 92
            break;
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <SerialByteTransmitComplete+0x152>

            default:
                s->transmit_escaped_char = 0;
     8e0:	f9 01       	movw	r30, r18
     8e2:	e2 59       	subi	r30, 0x92	; 146
     8e4:	ff 4f       	sbci	r31, 0xFF	; 255
     8e6:	10 82       	st	Z, r1
            break;
        }
    }

    // Transmit the data!
    if (s->Transmit!=0)
     8e8:	f9 01       	movw	r30, r18
     8ea:	ef 58       	subi	r30, 0x8F	; 143
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	40 81       	ld	r20, Z
     8f0:	51 81       	ldd	r21, Z+1	; 0x01
     8f2:	41 15       	cp	r20, r1
     8f4:	51 05       	cpc	r21, r1
     8f6:	21 f0       	breq	.+8      	; 0x900 <SerialByteTransmitComplete+0x16a>
    {
        s->Transmit(dataToTx);
     8f8:	01 90       	ld	r0, Z+
     8fa:	f0 81       	ld	r31, Z
     8fc:	e0 2d       	mov	r30, r0
     8fe:	19 95       	eicall
     900:	08 95       	ret

00000902 <SerialTransferInProgress>:
 * @return true if a packet transfer is currently
 *      in progress, false otherwise.
 */
char SerialTransferInProgress(volatile SerialData * s)
{
    return (s->transmit_state != PROC_STATE_TRANSMIT_COMPLETE);
     902:	fc 01       	movw	r30, r24
     904:	e6 59       	subi	r30, 0x96	; 150
     906:	ff 4f       	sbci	r31, 0xFF	; 255
     908:	90 81       	ld	r25, Z
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	94 31       	cpi	r25, 0x14	; 20
     90e:	09 f4       	brne	.+2      	; 0x912 <SerialTransferInProgress+0x10>
     910:	80 e0       	ldi	r24, 0x00	; 0
}
     912:	08 95       	ret

00000914 <SerialTransmit>:
 * @param maxLength Number of bytes allocated for
 *      the data array.
 * @return 0 for success, nonzero for failure.
 */
char SerialTransmit(volatile SerialData * s, byte address, byte length)
{
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
     91e:	06 2f       	mov	r16, r22
     920:	14 2f       	mov	r17, r20
    if (SerialTransferInProgress(s))
     922:	0e 94 81 04 	call	0x902	; 0x902 <SerialTransferInProgress>
     926:	88 23       	and	r24, r24
     928:	49 f5       	brne	.+82     	; 0x97c <SerialTransmit+0x68>
    {
        return -1;
    }

    if (s->Transmit == 0)
     92a:	fe 01       	movw	r30, r28
     92c:	ef 58       	subi	r30, 0x8F	; 143
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	21 f1       	breq	.+72     	; 0x980 <SerialTransmit+0x6c>
    {
        return -2;
    }

    if (length > SERIAL_TRANSMIT_BUFFER_SIZE)
     938:	13 33       	cpi	r17, 0x33	; 51
     93a:	20 f5       	brcc	.+72     	; 0x984 <SerialTransmit+0x70>
    {
        return -3;
    }

    s->transmit_address = address;
     93c:	fe 01       	movw	r30, r28
     93e:	e5 59       	subi	r30, 0x95	; 149
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	00 83       	st	Z, r16
    s->transmit_length = length;
     944:	fe 01       	movw	r30, r28
     946:	e4 59       	subi	r30, 0x94	; 148
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	10 83       	st	Z, r17
    s->transmit_data_ptr = (byte *)s->transmit_data;
     94c:	ce 01       	movw	r24, r28
     94e:	c8 96       	adiw	r24, 0x38	; 56
     950:	fe 01       	movw	r30, r28
     952:	e1 59       	subi	r30, 0x91	; 145
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	80 83       	st	Z, r24
     958:	91 83       	std	Z+1, r25	; 0x01
    s->transmit_escaped_char = 0;
     95a:	fe 01       	movw	r30, r28
     95c:	e2 59       	subi	r30, 0x92	; 146
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	10 82       	st	Z, r1
    s->transmit_state = PROC_STATE_TRANSMIT_ADDRESS;
     962:	fe 01       	movw	r30, r28
     964:	e6 59       	subi	r30, 0x96	; 150
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	8f e0       	ldi	r24, 0x0F	; 15
     96a:	80 83       	st	Z, r24

    s->Transmit(START_BYTE);
     96c:	cf 58       	subi	r28, 0x8F	; 143
     96e:	df 4f       	sbci	r29, 0xFF	; 255
     970:	e8 81       	ld	r30, Y
     972:	f9 81       	ldd	r31, Y+1	; 0x01
     974:	8a ec       	ldi	r24, 0xCA	; 202
     976:	19 95       	eicall

    return 0;
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	05 c0       	rjmp	.+10     	; 0x986 <SerialTransmit+0x72>
 */
char SerialTransmit(volatile SerialData * s, byte address, byte length)
{
    if (SerialTransferInProgress(s))
    {
        return -1;
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	03 c0       	rjmp	.+6      	; 0x986 <SerialTransmit+0x72>
    }

    if (s->Transmit == 0)
    {
        return -2;
     980:	8e ef       	ldi	r24, 0xFE	; 254
     982:	01 c0       	rjmp	.+2      	; 0x986 <SerialTransmit+0x72>
    }

    if (length > SERIAL_TRANSMIT_BUFFER_SIZE)
    {
        return -3;
     984:	8d ef       	ldi	r24, 0xFD	; 253
    s->transmit_state = PROC_STATE_TRANSMIT_ADDRESS;

    s->Transmit(START_BYTE);

    return 0;
}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	08 95       	ret

00000990 <InitClock>:
	/* Clock Setup */
	
	/* Enable for external 2-9 MHz crystal with quick startup time
		* (256CLK). Check if it's stable and set it as the PLL input.
		*/
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc, false, OSC_XOSCSEL_EXTCLK_gc );
     990:	80 e4       	ldi	r24, 0x40	; 64
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	0e 94 37 01 	call	0x26e	; 0x26e <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
     99a:	e0 e5       	ldi	r30, 0x50	; 80
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	88 60       	ori	r24, 0x08	; 8
     9a2:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     9a4:	81 81       	ldd	r24, Z+1	; 0x01
     9a6:	83 ff       	sbrs	r24, 3
     9a8:	fd cf       	rjmp	.-6      	; 0x9a4 <InitClock+0x14>
	/*  Configure PLL with the 8 MHz external clock as source and
		*  multiply by 4 to get 32 MHz PLL clock and enable it. Wait
		*  for it to be stable and set prescaler C to divide by two
		*  to set the CPU clock to 16 MHz.
		*/
	CLKSYS_PLL_Config(OSC_PLLSRC_XOSC_gc, 4 );
     9aa:	80 ec       	ldi	r24, 0xC0	; 192
     9ac:	64 e0       	ldi	r22, 0x04	; 4
     9ae:	0e 94 42 01 	call	0x284	; 0x284 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
     9b2:	e0 e5       	ldi	r30, 0x50	; 80
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	80 61       	ori	r24, 0x10	; 16
     9ba:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     9c4:	e0 e5       	ldi	r30, 0x50	; 80
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	81 81       	ldd	r24, Z+1	; 0x01
     9ca:	84 ff       	sbrs	r24, 4
     9cc:	fd cf       	rjmp	.-6      	; 0x9c8 <InitClock+0x38>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <CLKSYS_Main_ClockSource_Select>
}
     9d4:	08 95       	ret

000009d6 <UpdateAxisOutput>:

volatile int32_t ovf_count = 0;
volatile int32_t time = 0;

void UpdateAxisOutput (volatile AXIS_t * axis, int8_t position)
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	fc 01       	movw	r30, r24
	if (position & 32)
     9dc:	86 2f       	mov	r24, r22
     9de:	99 27       	eor	r25, r25
     9e0:	87 fd       	sbrc	r24, 7
     9e2:	90 95       	com	r25
     9e4:	85 ff       	sbrs	r24, 5
     9e6:	07 c0       	rjmp	.+14     	; 0x9f6 <UpdateAxisOutput+0x20>
	{
		axis->sign_select_port->OUTSET = axis->sign_switch_mask1;
     9e8:	a5 85       	ldd	r26, Z+13	; 0x0d
     9ea:	b6 85       	ldd	r27, Z+14	; 0x0e
     9ec:	27 85       	ldd	r18, Z+15	; 0x0f
     9ee:	15 96       	adiw	r26, 0x05	; 5
     9f0:	2c 93       	st	X, r18
     9f2:	15 97       	sbiw	r26, 0x05	; 5
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <UpdateAxisOutput+0x2a>
	}
	else
	{
		axis->sign_select_port->OUTCLR = axis->sign_switch_mask1;
     9f6:	a5 85       	ldd	r26, Z+13	; 0x0d
     9f8:	b6 85       	ldd	r27, Z+14	; 0x0e
     9fa:	27 85       	ldd	r18, Z+15	; 0x0f
     9fc:	16 96       	adiw	r26, 0x06	; 6
     9fe:	2c 93       	st	X, r18
	}
	*axis->phase_pwm_cmp1 = v[position & 0x1F];
     a00:	a1 89       	ldd	r26, Z+17	; 0x11
     a02:	b2 89       	ldd	r27, Z+18	; 0x12
     a04:	8f 71       	andi	r24, 0x1F	; 31
     a06:	90 70       	andi	r25, 0x00	; 0
     a08:	ec 01       	movw	r28, r24
     a0a:	c0 50       	subi	r28, 0x00	; 0
     a0c:	d0 4e       	sbci	r29, 0xE0	; 224
     a0e:	88 81       	ld	r24, Y
     a10:	8c 93       	st	X, r24
     a12:	11 96       	adiw	r26, 0x01	; 1
     a14:	1c 92       	st	X, r1
     a16:	11 97       	sbiw	r26, 0x01	; 1
	
	position += 16;
     a18:	60 5f       	subi	r22, 0xF0	; 240
	if (position & 32)
     a1a:	77 27       	eor	r23, r23
     a1c:	67 fd       	sbrc	r22, 7
     a1e:	70 95       	com	r23
     a20:	65 ff       	sbrs	r22, 5
     a22:	07 c0       	rjmp	.+14     	; 0xa32 <UpdateAxisOutput+0x5c>
	{
		axis->sign_select_port->OUTSET = axis->sign_switch_mask2;
     a24:	a5 85       	ldd	r26, Z+13	; 0x0d
     a26:	b6 85       	ldd	r27, Z+14	; 0x0e
     a28:	80 89       	ldd	r24, Z+16	; 0x10
     a2a:	15 96       	adiw	r26, 0x05	; 5
     a2c:	8c 93       	st	X, r24
     a2e:	15 97       	sbiw	r26, 0x05	; 5
     a30:	05 c0       	rjmp	.+10     	; 0xa3c <UpdateAxisOutput+0x66>
	}
	else
	{
		axis->sign_select_port->OUTCLR = axis->sign_switch_mask2;
     a32:	a5 85       	ldd	r26, Z+13	; 0x0d
     a34:	b6 85       	ldd	r27, Z+14	; 0x0e
     a36:	80 89       	ldd	r24, Z+16	; 0x10
     a38:	16 96       	adiw	r26, 0x06	; 6
     a3a:	8c 93       	st	X, r24
	}
	*axis->phase_pwm_cmp2 = v[position & 0x1F];
     a3c:	03 88       	ldd	r0, Z+19	; 0x13
     a3e:	f4 89       	ldd	r31, Z+20	; 0x14
     a40:	e0 2d       	mov	r30, r0
     a42:	6f 71       	andi	r22, 0x1F	; 31
     a44:	70 70       	andi	r23, 0x00	; 0
     a46:	db 01       	movw	r26, r22
     a48:	a0 50       	subi	r26, 0x00	; 0
     a4a:	b0 4e       	sbci	r27, 0xE0	; 224
     a4c:	8c 91       	ld	r24, X
     a4e:	80 83       	st	Z, r24
     a50:	11 82       	std	Z+1, r1	; 0x01
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	08 95       	ret

00000a58 <UpdateAxis>:

void UpdateAxis (volatile AXIS_t * axis)
{
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	ec 01       	movw	r28, r24
	if (ovf_count == time) // Last step
     a6a:	40 91 25 20 	lds	r20, 0x2025
     a6e:	50 91 26 20 	lds	r21, 0x2026
     a72:	60 91 27 20 	lds	r22, 0x2027
     a76:	70 91 28 20 	lds	r23, 0x2028
     a7a:	80 91 21 20 	lds	r24, 0x2021
     a7e:	90 91 22 20 	lds	r25, 0x2022
     a82:	a0 91 23 20 	lds	r26, 0x2023
     a86:	b0 91 24 20 	lds	r27, 0x2024
     a8a:	48 17       	cp	r20, r24
     a8c:	59 07       	cpc	r21, r25
     a8e:	6a 07       	cpc	r22, r26
     a90:	7b 07       	cpc	r23, r27
     a92:	c9 f4       	brne	.+50     	; 0xac6 <UpdateAxis+0x6e>
	{
		axis->location += axis->delta;
     a94:	48 81       	ld	r20, Y
     a96:	59 81       	ldd	r21, Y+1	; 0x01
     a98:	6a 81       	ldd	r22, Y+2	; 0x02
     a9a:	7b 81       	ldd	r23, Y+3	; 0x03
     a9c:	8c 81       	ldd	r24, Y+4	; 0x04
     a9e:	9d 81       	ldd	r25, Y+5	; 0x05
     aa0:	ae 81       	ldd	r26, Y+6	; 0x06
     aa2:	bf 81       	ldd	r27, Y+7	; 0x07
     aa4:	84 0f       	add	r24, r20
     aa6:	95 1f       	adc	r25, r21
     aa8:	a6 1f       	adc	r26, r22
     aaa:	b7 1f       	adc	r27, r23
     aac:	88 83       	st	Y, r24
     aae:	99 83       	std	Y+1, r25	; 0x01
     ab0:	aa 83       	std	Y+2, r26	; 0x02
     ab2:	bb 83       	std	Y+3, r27	; 0x03
		UpdateAxisOutput(axis, axis->location & 0xFF);
     ab4:	48 81       	ld	r20, Y
     ab6:	59 81       	ldd	r21, Y+1	; 0x01
     ab8:	6a 81       	ldd	r22, Y+2	; 0x02
     aba:	7b 81       	ldd	r23, Y+3	; 0x03
     abc:	ce 01       	movw	r24, r28
     abe:	64 2f       	mov	r22, r20
     ac0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <UpdateAxisOutput>
     ac4:	4a c0       	rjmp	.+148    	; 0xb5a <UpdateAxis+0x102>
	}
	else // Intermediate
	{
		// This math takes about 300uS
		int32_t add = (1 + (axis->delta * (1 + 2 * ovf_count)) / time) / 2;
     ac6:	6c 81       	ldd	r22, Y+4	; 0x04
     ac8:	7d 81       	ldd	r23, Y+5	; 0x05
     aca:	8e 81       	ldd	r24, Y+6	; 0x06
     acc:	9f 81       	ldd	r25, Y+7	; 0x07
     ace:	00 91 25 20 	lds	r16, 0x2025
     ad2:	10 91 26 20 	lds	r17, 0x2026
     ad6:	20 91 27 20 	lds	r18, 0x2027
     ada:	30 91 28 20 	lds	r19, 0x2028
     ade:	c0 90 21 20 	lds	r12, 0x2021
     ae2:	d0 90 22 20 	lds	r13, 0x2022
     ae6:	e0 90 23 20 	lds	r14, 0x2023
     aea:	f0 90 24 20 	lds	r15, 0x2024
     aee:	a9 01       	movw	r20, r18
     af0:	98 01       	movw	r18, r16
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	44 1f       	adc	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	2f 5f       	subi	r18, 0xFF	; 255
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
     afe:	4f 4f       	sbci	r20, 0xFF	; 255
     b00:	5f 4f       	sbci	r21, 0xFF	; 255
     b02:	0e 94 c8 08 	call	0x1190	; 0x1190 <__mulsi3>
     b06:	a7 01       	movw	r20, r14
     b08:	96 01       	movw	r18, r12
     b0a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divmodsi4>
     b0e:	ca 01       	movw	r24, r20
     b10:	b9 01       	movw	r22, r18
     b12:	6f 5f       	subi	r22, 0xFF	; 255
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	8f 4f       	sbci	r24, 0xFF	; 255
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	22 e0       	ldi	r18, 0x02	; 2
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divmodsi4>
     b26:	89 01       	movw	r16, r18
     b28:	9a 01       	movw	r18, r20
		
		// Buffered to prevent update while reading outside of interrupts
		if (axis->can_update_output)
     b2a:	88 8d       	ldd	r24, Y+24	; 0x18
     b2c:	88 23       	and	r24, r24
     b2e:	61 f0       	breq	.+24     	; 0xb48 <UpdateAxis+0xf0>
		{
			axis->current_location_buffer = axis->location + add;
     b30:	88 81       	ld	r24, Y
     b32:	99 81       	ldd	r25, Y+1	; 0x01
     b34:	aa 81       	ldd	r26, Y+2	; 0x02
     b36:	bb 81       	ldd	r27, Y+3	; 0x03
     b38:	80 0f       	add	r24, r16
     b3a:	91 1f       	adc	r25, r17
     b3c:	a2 1f       	adc	r26, r18
     b3e:	b3 1f       	adc	r27, r19
     b40:	89 8f       	std	Y+25, r24	; 0x19
     b42:	9a 8f       	std	Y+26, r25	; 0x1a
     b44:	ab 8f       	std	Y+27, r26	; 0x1b
     b46:	bc 8f       	std	Y+28, r27	; 0x1c
		}
		UpdateAxisOutput(axis, (axis->location + add) & 0xFF);
     b48:	88 81       	ld	r24, Y
     b4a:	99 81       	ldd	r25, Y+1	; 0x01
     b4c:	aa 81       	ldd	r26, Y+2	; 0x02
     b4e:	bb 81       	ldd	r27, Y+3	; 0x03
     b50:	60 2f       	mov	r22, r16
     b52:	68 0f       	add	r22, r24
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <UpdateAxisOutput>
	}
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	cf 90       	pop	r12
     b6a:	08 95       	ret

00000b6c <OnAxisTimerOverflow>:

void OnAxisTimerOverflow ()
{
	PORTE.OUTSET = 0x01;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	e0 e8       	ldi	r30, 0x80	; 128
     b70:	f6 e0       	ldi	r31, 0x06	; 6
     b72:	85 83       	std	Z+5, r24	; 0x05
	
	if (time == 0)
     b74:	80 91 21 20 	lds	r24, 0x2021
     b78:	90 91 22 20 	lds	r25, 0x2022
     b7c:	a0 91 23 20 	lds	r26, 0x2023
     b80:	b0 91 24 20 	lds	r27, 0x2024
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <OnAxisTimerOverflow+0x22>
     b8c:	61 c0       	rjmp	.+194    	; 0xc50 <OnAxisTimerOverflow+0xe4>
	{
		// Nothing to do
	}
	else
	{
		UpdateAxis (&x_axis);
     b8e:	8f ec       	ldi	r24, 0xCF	; 207
     b90:	90 e2       	ldi	r25, 0x20	; 32
     b92:	0e 94 2c 05 	call	0xa58	; 0xa58 <UpdateAxis>
		UpdateAxis (&y_axis);
     b96:	8c ee       	ldi	r24, 0xEC	; 236
     b98:	90 e2       	ldi	r25, 0x20	; 32
     b9a:	0e 94 2c 05 	call	0xa58	; 0xa58 <UpdateAxis>
		UpdateAxis (&z_axis);
     b9e:	82 eb       	ldi	r24, 0xB2	; 178
     ba0:	90 e2       	ldi	r25, 0x20	; 32
     ba2:	0e 94 2c 05 	call	0xa58	; 0xa58 <UpdateAxis>
	
		if (ovf_count == time)
     ba6:	40 91 25 20 	lds	r20, 0x2025
     baa:	50 91 26 20 	lds	r21, 0x2026
     bae:	60 91 27 20 	lds	r22, 0x2027
     bb2:	70 91 28 20 	lds	r23, 0x2028
     bb6:	80 91 21 20 	lds	r24, 0x2021
     bba:	90 91 22 20 	lds	r25, 0x2022
     bbe:	a0 91 23 20 	lds	r26, 0x2023
     bc2:	b0 91 24 20 	lds	r27, 0x2024
     bc6:	48 17       	cp	r20, r24
     bc8:	59 07       	cpc	r21, r25
     bca:	6a 07       	cpc	r22, r26
     bcc:	7b 07       	cpc	r23, r27
     bce:	69 f5       	brne	.+90     	; 0xc2a <OnAxisTimerOverflow+0xbe>
		{
			// TODO: If there's a buffer of positions, move to the next one here
			// (set delta, time, and count accordingly)
			x_axis.delta = 0;
     bd0:	10 92 d3 20 	sts	0x20D3, r1
     bd4:	10 92 d4 20 	sts	0x20D4, r1
     bd8:	10 92 d5 20 	sts	0x20D5, r1
     bdc:	10 92 d6 20 	sts	0x20D6, r1
			y_axis.delta = 0;
     be0:	10 92 f0 20 	sts	0x20F0, r1
     be4:	10 92 f1 20 	sts	0x20F1, r1
     be8:	10 92 f2 20 	sts	0x20F2, r1
     bec:	10 92 f3 20 	sts	0x20F3, r1
			z_axis.delta = 0;
     bf0:	10 92 b6 20 	sts	0x20B6, r1
     bf4:	10 92 b7 20 	sts	0x20B7, r1
     bf8:	10 92 b8 20 	sts	0x20B8, r1
     bfc:	10 92 b9 20 	sts	0x20B9, r1
			time = 0;
     c00:	10 92 21 20 	sts	0x2021, r1
     c04:	10 92 22 20 	sts	0x2022, r1
     c08:	10 92 23 20 	sts	0x2023, r1
     c0c:	10 92 24 20 	sts	0x2024, r1
			ovf_count = 0;
     c10:	10 92 25 20 	sts	0x2025, r1
     c14:	10 92 26 20 	sts	0x2026, r1
     c18:	10 92 27 20 	sts	0x2027, r1
     c1c:	10 92 28 20 	sts	0x2028, r1
			PORTE.OUTTGL = 0x02;
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	e0 e8       	ldi	r30, 0x80	; 128
     c24:	f6 e0       	ldi	r31, 0x06	; 6
     c26:	87 83       	std	Z+7, r24	; 0x07
     c28:	13 c0       	rjmp	.+38     	; 0xc50 <OnAxisTimerOverflow+0xe4>
		}
		else
		{
			ovf_count++;
     c2a:	80 91 25 20 	lds	r24, 0x2025
     c2e:	90 91 26 20 	lds	r25, 0x2026
     c32:	a0 91 27 20 	lds	r26, 0x2027
     c36:	b0 91 28 20 	lds	r27, 0x2028
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	a1 1d       	adc	r26, r1
     c3e:	b1 1d       	adc	r27, r1
     c40:	80 93 25 20 	sts	0x2025, r24
     c44:	90 93 26 20 	sts	0x2026, r25
     c48:	a0 93 27 20 	sts	0x2027, r26
     c4c:	b0 93 28 20 	sts	0x2028, r27
		}
	}	

	PORTE.OUTCLR = 0x01;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	e0 e8       	ldi	r30, 0x80	; 128
     c54:	f6 e0       	ldi	r31, 0x06	; 6
     c56:	86 83       	std	Z+6, r24	; 0x06
}
     c58:	08 95       	ret

00000c5a <__vector_20>:

ISR(TCC1_OVF_vect)
{
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	0f 92       	push	r0
     c62:	08 b6       	in	r0, 0x38	; 56
     c64:	0f 92       	push	r0
     c66:	09 b6       	in	r0, 0x39	; 57
     c68:	0f 92       	push	r0
     c6a:	0b b6       	in	r0, 0x3b	; 59
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	2f 93       	push	r18
     c72:	3f 93       	push	r19
     c74:	4f 93       	push	r20
     c76:	5f 93       	push	r21
     c78:	6f 93       	push	r22
     c7a:	7f 93       	push	r23
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	af 93       	push	r26
     c82:	bf 93       	push	r27
     c84:	ef 93       	push	r30
     c86:	ff 93       	push	r31
	OnAxisTimerOverflow();
     c88:	0e 94 b6 05 	call	0xb6c	; 0xb6c <OnAxisTimerOverflow>
}
     c8c:	ff 91       	pop	r31
     c8e:	ef 91       	pop	r30
     c90:	bf 91       	pop	r27
     c92:	af 91       	pop	r26
     c94:	9f 91       	pop	r25
     c96:	8f 91       	pop	r24
     c98:	7f 91       	pop	r23
     c9a:	6f 91       	pop	r22
     c9c:	5f 91       	pop	r21
     c9e:	4f 91       	pop	r20
     ca0:	3f 91       	pop	r19
     ca2:	2f 91       	pop	r18
     ca4:	0f 90       	pop	r0
     ca6:	0b be       	out	0x3b, r0	; 59
     ca8:	0f 90       	pop	r0
     caa:	09 be       	out	0x39, r0	; 57
     cac:	0f 90       	pop	r0
     cae:	08 be       	out	0x38, r0	; 56
     cb0:	0f 90       	pop	r0
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	0f 90       	pop	r0
     cb6:	1f 90       	pop	r1
     cb8:	18 95       	reti

00000cba <LimitSwitchHelper>:
		}
	}
}

char LimitSwitchHelper (volatile AXIS_t * axis_ptr)
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
	if (axis_ptr->state == 1)
     cc0:	8f 89       	ldd	r24, Y+23	; 0x17
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	f1 f4       	brne	.+60     	; 0xd02 <LimitSwitchHelper+0x48>
	{
		/* Send command to move axis toward limit switch (positive direction) */
		if (!IsMoving (axis_ptr))
     cc6:	ce 01       	movw	r24, r28
     cc8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <IsMoving>
     ccc:	88 23       	and	r24, r24
     cce:	09 f0       	breq	.+2      	; 0xcd2 <LimitSwitchHelper+0x18>
     cd0:	41 c0       	rjmp	.+130    	; 0xd54 <LimitSwitchHelper+0x9a>
		{
			if (IsOnLimit(axis_ptr)) //PORTB_IN & 0x02) // Active High, limit switch hit = high
     cd2:	ce 01       	movw	r24, r28
     cd4:	0e 94 cc 01 	call	0x398	; 0x398 <IsOnLimit>
     cd8:	88 23       	and	r24, r24
     cda:	21 f0       	breq	.+8      	; 0xce4 <LimitSwitchHelper+0x2a>
			{
				axis_ptr->state = 2;
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	8f 8b       	std	Y+23, r24	; 0x17
		//task = -1;
		axis_ptr->state = 0;
		/* Done */
		return 1;
	}
	return 0;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	3d c0       	rjmp	.+122    	; 0xd5e <LimitSwitchHelper+0xa4>
			{
				axis_ptr->state = 2;
			}
			else
			{
				AxisRun (axis_ptr, axis_ptr->location + 200, 0); /* Move 200 ticks with the minimum period (fast as possible) */
     ce4:	48 81       	ld	r20, Y
     ce6:	59 81       	ldd	r21, Y+1	; 0x01
     ce8:	6a 81       	ldd	r22, Y+2	; 0x02
     cea:	7b 81       	ldd	r23, Y+3	; 0x03
     cec:	48 53       	subi	r20, 0x38	; 56
     cee:	5f 4f       	sbci	r21, 0xFF	; 255
     cf0:	6f 4f       	sbci	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	ce 01       	movw	r24, r28
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	0e 94 03 02 	call	0x406	; 0x406 <AxisRun>
		//task = -1;
		axis_ptr->state = 0;
		/* Done */
		return 1;
	}
	return 0;
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	2e c0       	rjmp	.+92     	; 0xd5e <LimitSwitchHelper+0xa4>
			{
				AxisRun (axis_ptr, axis_ptr->location + 200, 0); /* Move 200 ticks with the minimum period (fast as possible) */
			}					
		}				
	}
	else if (axis_ptr->state == 2)
     d02:	8f 89       	ldd	r24, Y+23	; 0x17
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	e9 f4       	brne	.+58     	; 0xd42 <LimitSwitchHelper+0x88>
	{
		/* Send command to move axis away from the limit switch (slowly) */
		if (!IsMoving (axis_ptr)) //if (deltaD == locationD)
     d08:	ce 01       	movw	r24, r28
     d0a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <IsMoving>
     d0e:	88 23       	and	r24, r24
     d10:	19 f5       	brne	.+70     	; 0xd58 <LimitSwitchHelper+0x9e>
		{
			if (IsOnLimit(axis_ptr)) //if (PORTB_IN & 0x02) // Active High, limit switch hit = high
     d12:	ce 01       	movw	r24, r28
     d14:	0e 94 cc 01 	call	0x398	; 0x398 <IsOnLimit>
     d18:	88 23       	and	r24, r24
     d1a:	79 f0       	breq	.+30     	; 0xd3a <LimitSwitchHelper+0x80>
			{
				AxisRun (axis_ptr, axis_ptr->location - 5, 200); /* Move -5 ticks with period 200 */
     d1c:	48 81       	ld	r20, Y
     d1e:	59 81       	ldd	r21, Y+1	; 0x01
     d20:	6a 81       	ldd	r22, Y+2	; 0x02
     d22:	7b 81       	ldd	r23, Y+3	; 0x03
     d24:	45 50       	subi	r20, 0x05	; 5
     d26:	50 40       	sbci	r21, 0x00	; 0
     d28:	60 40       	sbci	r22, 0x00	; 0
     d2a:	70 40       	sbci	r23, 0x00	; 0
     d2c:	ce 01       	movw	r24, r28
     d2e:	28 ec       	ldi	r18, 0xC8	; 200
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	0e 94 03 02 	call	0x406	; 0x406 <AxisRun>
		//task = -1;
		axis_ptr->state = 0;
		/* Done */
		return 1;
	}
	return 0;
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <LimitSwitchHelper+0xa4>
			{
				AxisRun (axis_ptr, axis_ptr->location - 5, 200); /* Move -5 ticks with period 200 */
			}
			else
			{
				axis_ptr->state = 3; 
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	8f 8b       	std	Y+23, r24	; 0x17
		//task = -1;
		axis_ptr->state = 0;
		/* Done */
		return 1;
	}
	return 0;
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	0e c0       	rjmp	.+28     	; 0xd5e <LimitSwitchHelper+0xa4>
			{
				axis_ptr->state = 3; 
			}					
		}	
	}
	else if (axis_ptr->state == 3)
     d42:	8f 89       	ldd	r24, Y+23	; 0x17
     d44:	83 30       	cpi	r24, 0x03	; 3
     d46:	51 f4       	brne	.+20     	; 0xd5c <LimitSwitchHelper+0xa2>
	{
		ZeroLocation (axis_ptr);
     d48:	ce 01       	movw	r24, r28
     d4a:	0e 94 05 02 	call	0x40a	; 0x40a <ZeroLocation>
		//task = -1;
		axis_ptr->state = 0;
     d4e:	1f 8a       	std	Y+23, r1	; 0x17
		/* Done */
		return 1;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <LimitSwitchHelper+0xa4>
	}
	return 0;
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <LimitSwitchHelper+0xa4>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <LimitSwitchHelper+0xa4>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <main>:
#define TASK_LIMIT_SWITCH_X 1
#define TASK_LIMIT_SWITCH_Y 2
#define TASK_LIMIT_SWITCY_Z 3

int main(void)
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	29 97       	sbiw	r28, 0x09	; 9
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	de bf       	out	0x3e, r29	; 62
	InitClock();
     d72:	0e 94 c8 04 	call	0x990	; 0x990 <InitClock>
	SerialInit();
     d76:	0e 94 37 02 	call	0x46e	; 0x46e <SerialInit>
	
	PORTC.DIRSET = 0xF3;
     d7a:	e0 e4       	ldi	r30, 0x40	; 64
     d7c:	f6 e0       	ldi	r31, 0x06	; 6
     d7e:	83 ef       	ldi	r24, 0xF3	; 243
     d80:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = 0xFF;
     d82:	0f 2e       	mov	r0, r31
     d84:	f0 e8       	ldi	r31, 0x80	; 128
     d86:	ef 2e       	mov	r14, r31
     d88:	f6 e0       	ldi	r31, 0x06	; 6
     d8a:	ff 2e       	mov	r15, r31
     d8c:	f0 2d       	mov	r31, r0
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	d7 01       	movw	r26, r14
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	8c 93       	st	X, r24
	PORTD.DIRSET = 0x33;
     d96:	00 e6       	ldi	r16, 0x60	; 96
     d98:	16 e0       	ldi	r17, 0x06	; 6
     d9a:	93 e3       	ldi	r25, 0x33	; 51
     d9c:	d8 01       	movw	r26, r16
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	9c 93       	st	X, r25
	PORTB.DIRCLR = 0xFF; /* PortB all inputs */
     da2:	0f 2e       	mov	r0, r31
     da4:	f0 e2       	ldi	r31, 0x20	; 32
     da6:	2f 2e       	mov	r2, r31
     da8:	f6 e0       	ldi	r31, 0x06	; 6
     daa:	3f 2e       	mov	r3, r31
     dac:	f0 2d       	mov	r31, r0
     dae:	d1 01       	movw	r26, r2
     db0:	12 96       	adiw	r26, 0x02	; 2
     db2:	8c 93       	st	X, r24
	
	/* Timers */
	//x_axis.step_timer = &TCC1;
	x_axis.pwm_timer = &TCC0;
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	98 e0       	ldi	r25, 0x08	; 8
     db8:	80 93 d7 20 	sts	0x20D7, r24
     dbc:	90 93 d8 20 	sts	0x20D8, r25
	
	/* Limit Switches */
	x_axis.limit_switch_port = &PORTB;
     dc0:	20 92 d9 20 	sts	0x20D9, r2
     dc4:	30 92 da 20 	sts	0x20DA, r3
	x_axis.limit_switch_mask = (1<<0); /* PORTB.0 */
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	80 93 db 20 	sts	0x20DB, r24
	
	/* DIR ports (for inverting the stepper motor driver polarity) */
	x_axis.sign_select_port = &PORTC;
     dce:	e0 93 dc 20 	sts	0x20DC, r30
     dd2:	f0 93 dd 20 	sts	0x20DD, r31
	x_axis.sign_switch_mask1 = 0x20; /* PORTC.5 */
     dd6:	dd 24       	eor	r13, r13
     dd8:	68 94       	set
     dda:	d5 f8       	bld	r13, 5
     ddc:	d0 92 de 20 	sts	0x20DE, r13
	x_axis.sign_switch_mask2 = 0x10; /* PORTC.4 */
     de0:	cc 24       	eor	r12, r12
     de2:	68 94       	set
     de4:	c4 f8       	bld	r12, 4
     de6:	c0 92 df 20 	sts	0x20DF, r12
	
	/* PWM outputs: outputs will be 90 degrees out of phase */
	x_axis.phase_pwm_cmp1 = &(TCC0.CCB);
     dea:	8a e2       	ldi	r24, 0x2A	; 42
     dec:	98 e0       	ldi	r25, 0x08	; 8
     dee:	80 93 e0 20 	sts	0x20E0, r24
     df2:	90 93 e1 20 	sts	0x20E1, r25
	x_axis.phase_pwm_cmp2 = &(TCC0.CCA);
     df6:	88 e2       	ldi	r24, 0x28	; 40
     df8:	98 e0       	ldi	r25, 0x08	; 8
     dfa:	80 93 e2 20 	sts	0x20E2, r24
     dfe:	90 93 e3 20 	sts	0x20E3, r25
	x_axis.compare_mask = TC0_CCBEN_bm | TC0_CCAEN_bm;
     e02:	0f 2e       	mov	r0, r31
     e04:	f0 e3       	ldi	r31, 0x30	; 48
     e06:	4f 2e       	mov	r4, r31
     e08:	f0 2d       	mov	r31, r0
     e0a:	40 92 e5 20 	sts	0x20E5, r4
	
	/* Power Controls change the period: a longer period means longer off time and lower duty cycle */
	//x_axis.axis_idle_power = 60;
	x_axis.axis_run_power = 31;
     e0e:	0f 2e       	mov	r0, r31
     e10:	ff e1       	ldi	r31, 0x1F	; 31
     e12:	8f 2e       	mov	r8, r31
     e14:	f0 2d       	mov	r31, r0
     e16:	80 92 e4 20 	sts	0x20E4, r8
	
	/* The minimum period of the PWM update timer/counter */
	/* Stepper motor tick period = 32 * min_period / 16000000 */
	//x_axis.min_period = 15;
	AxisInit (&x_axis);
     e1a:	8f ec       	ldi	r24, 0xCF	; 207
     e1c:	90 e2       	ldi	r25, 0x20	; 32
     e1e:	0e 94 9d 01 	call	0x33a	; 0x33a <AxisInit>
	
	//y_axis.step_timer = &TCD1;
	y_axis.pwm_timer = &TCD0;
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	99 e0       	ldi	r25, 0x09	; 9
     e26:	80 93 f4 20 	sts	0x20F4, r24
     e2a:	90 93 f5 20 	sts	0x20F5, r25
	y_axis.limit_switch_port = &PORTB;
     e2e:	20 92 f6 20 	sts	0x20F6, r2
     e32:	30 92 f7 20 	sts	0x20F7, r3
	y_axis.limit_switch_mask  = (1<<1); /* PORTB.1 */
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	80 93 f8 20 	sts	0x20F8, r24
	y_axis.sign_select_port = &PORTD;
     e3c:	00 93 f9 20 	sts	0x20F9, r16
     e40:	10 93 fa 20 	sts	0x20FA, r17
	y_axis.sign_switch_mask1 = 0x20;
     e44:	d0 92 fb 20 	sts	0x20FB, r13
	y_axis.sign_switch_mask2 = 0x10;
     e48:	c0 92 fc 20 	sts	0x20FC, r12
	y_axis.phase_pwm_cmp1 = &(TCD0.CCB);
     e4c:	8a e2       	ldi	r24, 0x2A	; 42
     e4e:	99 e0       	ldi	r25, 0x09	; 9
     e50:	80 93 fd 20 	sts	0x20FD, r24
     e54:	90 93 fe 20 	sts	0x20FE, r25
	y_axis.phase_pwm_cmp2 = &(TCD0.CCA);
     e58:	88 e2       	ldi	r24, 0x28	; 40
     e5a:	99 e0       	ldi	r25, 0x09	; 9
     e5c:	80 93 ff 20 	sts	0x20FF, r24
     e60:	90 93 00 21 	sts	0x2100, r25
	y_axis.compare_mask = TC0_CCBEN_bm | TC0_CCAEN_bm;
     e64:	40 92 02 21 	sts	0x2102, r4
	//y_axis.axis_idle_power = 60;
	y_axis.axis_run_power = 31;
     e68:	80 92 01 21 	sts	0x2101, r8
	//y_axis.min_period = 15;
	AxisInit (&y_axis);
     e6c:	8c ee       	ldi	r24, 0xEC	; 236
     e6e:	90 e2       	ldi	r25, 0x20	; 32
     e70:	0e 94 9d 01 	call	0x33a	; 0x33a <AxisInit>
	
	//z_axis.step_timer = &TCE1;
	z_axis.pwm_timer = &TCE0;
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	9a e0       	ldi	r25, 0x0A	; 10
     e78:	80 93 ba 20 	sts	0x20BA, r24
     e7c:	90 93 bb 20 	sts	0x20BB, r25
	z_axis.limit_switch_port = &PORTB;
     e80:	20 92 bc 20 	sts	0x20BC, r2
     e84:	30 92 bd 20 	sts	0x20BD, r3
	z_axis.limit_switch_mask = (1<<2); /* PORTB.2 */
     e88:	84 e0       	ldi	r24, 0x04	; 4
     e8a:	80 93 be 20 	sts	0x20BE, r24
	z_axis.sign_select_port = &PORTE;
     e8e:	e0 92 bf 20 	sts	0x20BF, r14
     e92:	f0 92 c0 20 	sts	0x20C0, r15
	z_axis.sign_switch_mask1 = 0x20; /* PORTE.5 */
     e96:	d0 92 c1 20 	sts	0x20C1, r13
	z_axis.sign_switch_mask2 = 0x10; /* PORTE.4 */
     e9a:	c0 92 c2 20 	sts	0x20C2, r12
	z_axis.phase_pwm_cmp1 = &(TCE0.CCD);
     e9e:	8e e2       	ldi	r24, 0x2E	; 46
     ea0:	9a e0       	ldi	r25, 0x0A	; 10
     ea2:	80 93 c3 20 	sts	0x20C3, r24
     ea6:	90 93 c4 20 	sts	0x20C4, r25
	z_axis.phase_pwm_cmp2 = &(TCE0.CCC);
     eaa:	8c e2       	ldi	r24, 0x2C	; 44
     eac:	9a e0       	ldi	r25, 0x0A	; 10
     eae:	80 93 c5 20 	sts	0x20C5, r24
     eb2:	90 93 c6 20 	sts	0x20C6, r25
	z_axis.compare_mask = TC0_CCDEN_bm | TC0_CCCEN_bm;
     eb6:	80 ec       	ldi	r24, 0xC0	; 192
     eb8:	80 93 c8 20 	sts	0x20C8, r24
	//z_axis.axis_idle_power = 60;
	z_axis.axis_run_power = 31; /* 33 unique waveform values: 0 (ground) to 33 (3.3v) */
     ebc:	80 92 c7 20 	sts	0x20C7, r8
	//z_axis.min_period = 15;
	AxisInit (&z_axis);
     ec0:	82 eb       	ldi	r24, 0xB2	; 178
     ec2:	90 e2       	ldi	r25, 0x20	; 32
     ec4:	0e 94 9d 01 	call	0x33a	; 0x33a <AxisInit>

	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     ec8:	e0 ea       	ldi	r30, 0xA0	; 160
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	82 81       	ldd	r24, Z+2	; 0x02
     ece:	87 60       	ori	r24, 0x07	; 7
     ed0:	82 83       	std	Z+2, r24	; 0x02
	
	// Fire up the timer for incrementing/decrementing steps
	TC0_t * step_timer = &TCC1;
	
	step_timer->CTRLB = TC_WGMODE_SS_gc;
     ed2:	e0 e4       	ldi	r30, 0x40	; 64
     ed4:	f8 e0       	ldi	r31, 0x08	; 8
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	81 83       	std	Z+1, r24	; 0x01
	
	/* Overflow every 1 ms: 16Mhz / (64 * 250) = 1ms */						
	step_timer->PER = 250;
     eda:	8a ef       	ldi	r24, 0xFA	; 250
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	86 a3       	lds	r24, 0x56
     ee0:	97 a3       	lds	r25, 0x57
	step_timer->CTRLA = TC_CLKSEL_DIV64_gc;
     ee2:	85 e0       	ldi	r24, 0x05	; 5
     ee4:	80 83       	st	Z, r24
	step_timer->CTRLFSET = TC_CMD_RESTART_gc;
     ee6:	88 e0       	ldi	r24, 0x08	; 8
     ee8:	81 87       	std	Z+9, r24	; 0x09
	
	/* Enable the step overflow interrupt */
	step_timer->INTCTRLA |= TC_OVFINTLVL_LO_gc;
     eea:	86 81       	ldd	r24, Z+6	; 0x06
     eec:	81 60       	ori	r24, 0x01	; 1
     eee:	86 83       	std	Z+6, r24	; 0x06
	// To Disable: axis->step_timer->INTCTRLA &= ~TC1_OVFINTLVL_gm;	
	
	
	char task = 0;
	sei();
     ef0:	78 94       	sei
	/* Enable the step overflow interrupt */
	step_timer->INTCTRLA |= TC_OVFINTLVL_LO_gc;
	// To Disable: axis->step_timer->INTCTRLA &= ~TC1_OVFINTLVL_gm;	
	
	
	char task = 0;
     ef2:	19 82       	std	Y+1, r1	; 0x01
					SerialTransmit (s, 0x00, 1); // Transmit to master device
					break;
				}
				case 0x77: // Ping (and location/status information)
				{
					s->transmit_data[0] = 0x77;
     ef4:	0f 2e       	mov	r0, r31
     ef6:	f7 e7       	ldi	r31, 0x77	; 119
     ef8:	2f 2e       	mov	r2, r31
     efa:	f0 2d       	mov	r31, r0
			switch (s->receive_data[0])
			{
				case 0x88: // Reset everything (all axis back to limit switches)
				{
					task = TASK_LIMIT_SWITCH_Y;
					x_axis.state = 1;
     efc:	33 24       	eor	r3, r3
     efe:	33 94       	inc	r3
					// Move the specified distance in 5 seconds
					// TODO: reincorporate speed into the command
					step_timer->INTCTRLA &= ~TC1_OVFINTLVL_gm; // Disable the step timer
					time = 5000;
					ovf_count = 0;
					x_axis.delta = x - x_axis.location;
     f00:	ef ec       	ldi	r30, 0xCF	; 207
     f02:	f0 e2       	ldi	r31, 0x20	; 32
     f04:	34 96       	adiw	r30, 0x04	; 4
     f06:	ea 83       	std	Y+2, r30	; 0x02
     f08:	fb 83       	std	Y+3, r31	; 0x03
					y_axis.delta = y - y_axis.location;
     f0a:	2c ee       	ldi	r18, 0xEC	; 236
     f0c:	30 e2       	ldi	r19, 0x20	; 32
     f0e:	2c 5f       	subi	r18, 0xFC	; 252
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	2c 83       	std	Y+4, r18	; 0x04
     f14:	3d 83       	std	Y+5, r19	; 0x05
					z_axis.delta = z - z_axis.location;
     f16:	42 eb       	ldi	r20, 0xB2	; 178
     f18:	50 e2       	ldi	r21, 0x20	; 32
     f1a:	4c 5f       	subi	r20, 0xFC	; 252
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	4e 83       	std	Y+6, r20	; 0x06
     f20:	5f 83       	std	Y+7, r21	; 0x07
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <main+0x1c2>
			uint8_t v = LimitSwitchHelper(&x_axis);
			v &= LimitSwitchHelper(&y_axis);
			v &= LimitSwitchHelper(&z_axis);
			if (v)
			{
				task = 0;
     f24:	19 82       	std	Y+1, r1	; 0x01
		//	s->transmit_data[1] = 'b';
		//	s->transmit_data[2] = 'c';
		//	SerialTransmit(s, 0x00, 3);
		//}
		
		SerialData * s = SerialDataAvailable();
     f26:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SerialDataAvailable>
     f2a:	8c 01       	movw	r16, r24
		if (s != 0)
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	09 f4       	brne	.+2      	; 0xf32 <main+0x1ce>
     f30:	19 c1       	rjmp	.+562    	; 0x1164 <main+0x400>
		{
			switch (s->receive_data[0])
     f32:	dc 01       	movw	r26, r24
     f34:	8c 91       	ld	r24, X
     f36:	87 37       	cpi	r24, 0x77	; 119
     f38:	d1 f0       	breq	.+52     	; 0xf6e <main+0x20a>
     f3a:	88 38       	cpi	r24, 0x88	; 136
     f3c:	19 f0       	breq	.+6      	; 0xf44 <main+0x1e0>
     f3e:	82 33       	cpi	r24, 0x32	; 50
     f40:	91 f7       	brne	.-28     	; 0xf26 <main+0x1c2>
     f42:	70 c0       	rjmp	.+224    	; 0x1024 <main+0x2c0>
			{
				case 0x88: // Reset everything (all axis back to limit switches)
				{
					task = TASK_LIMIT_SWITCH_Y;
					x_axis.state = 1;
     f44:	e6 ee       	ldi	r30, 0xE6	; 230
     f46:	f0 e2       	ldi	r31, 0x20	; 32
     f48:	30 82       	st	Z, r3
					y_axis.state = 1;
     f4a:	a3 e0       	ldi	r26, 0x03	; 3
     f4c:	b1 e2       	ldi	r27, 0x21	; 33
     f4e:	3c 92       	st	X, r3
					z_axis.state = 1;
     f50:	e9 ec       	ldi	r30, 0xC9	; 201
     f52:	f0 e2       	ldi	r31, 0x20	; 32
     f54:	30 82       	st	Z, r3
					s->transmit_data[0] = 0x88;
     f56:	e8 e8       	ldi	r30, 0x88	; 136
     f58:	d8 01       	movw	r26, r16
     f5a:	d8 96       	adiw	r26, 0x38	; 56
     f5c:	ec 93       	st	X, r30
					SerialTransmit (s, 0x00, 1); // Transmit to master device
     f5e:	c8 01       	movw	r24, r16
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	43 2d       	mov	r20, r3
     f64:	0e 94 8a 04 	call	0x914	; 0x914 <SerialTransmit>
		{
			switch (s->receive_data[0])
			{
				case 0x88: // Reset everything (all axis back to limit switches)
				{
					task = TASK_LIMIT_SWITCH_Y;
     f68:	f2 e0       	ldi	r31, 0x02	; 2
     f6a:	f9 83       	std	Y+1, r31	; 0x01
					x_axis.state = 1;
					y_axis.state = 1;
					z_axis.state = 1;
					s->transmit_data[0] = 0x88;
					SerialTransmit (s, 0x00, 1); // Transmit to master device
					break;
     f6c:	dc cf       	rjmp	.-72     	; 0xf26 <main+0x1c2>
				}
				case 0x77: // Ping (and location/status information)
				{
					s->transmit_data[0] = 0x77;
     f6e:	d8 01       	movw	r26, r16
     f70:	d8 96       	adiw	r26, 0x38	; 56
     f72:	2c 92       	st	X, r2
					
					// TODO: find a better way to do this
					step_timer->INTCTRLA &= ~TC1_OVFINTLVL_gm; // Disable the step timer
     f74:	80 91 46 08 	lds	r24, 0x0846
     f78:	8c 7f       	andi	r24, 0xFC	; 252
     f7a:	80 93 46 08 	sts	0x0846, r24
					int32_t x = AxisGetCurrentPosition(&x_axis);
     f7e:	8f ec       	ldi	r24, 0xCF	; 207
     f80:	90 e2       	ldi	r25, 0x20	; 32
     f82:	0e 94 e5 01 	call	0x3ca	; 0x3ca <AxisGetCurrentPosition>
     f86:	b6 2e       	mov	r11, r22
     f88:	a7 2e       	mov	r10, r23
     f8a:	f8 2e       	mov	r15, r24
     f8c:	e9 2e       	mov	r14, r25
					int32_t y = AxisGetCurrentPosition(&y_axis);
     f8e:	8c ee       	ldi	r24, 0xEC	; 236
     f90:	90 e2       	ldi	r25, 0x20	; 32
     f92:	0e 94 e5 01 	call	0x3ca	; 0x3ca <AxisGetCurrentPosition>
     f96:	d6 2e       	mov	r13, r22
     f98:	c7 2e       	mov	r12, r23
     f9a:	88 2e       	mov	r8, r24
     f9c:	49 2e       	mov	r4, r25
					int32_t z = AxisGetCurrentPosition(&z_axis);
     f9e:	82 eb       	ldi	r24, 0xB2	; 178
     fa0:	90 e2       	ldi	r25, 0x20	; 32
     fa2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <AxisGetCurrentPosition>
					step_timer->INTCTRLA |= TC_OVFINTLVL_LO_gc; // Enable the step timer
     fa6:	20 91 46 08 	lds	r18, 0x0846
     faa:	21 60       	ori	r18, 0x01	; 1
     fac:	20 93 46 08 	sts	0x0846, r18
					
					s->transmit_data[1] = x & 0xFF; x = x >> 8;
     fb0:	f8 01       	movw	r30, r16
     fb2:	b1 ae       	sts	0xb1, r27
					s->transmit_data[2] = x & 0xFF; x = x >> 8;
     fb4:	a2 ae       	sts	0xb2, r26
					s->transmit_data[3] = x & 0xFF; x = x >> 8;
     fb6:	f3 ae       	sts	0xb3, r31
					s->transmit_data[4] = x & 0xFF;
     fb8:	e4 ae       	sts	0xb4, r30
					
					s->transmit_data[5] = y & 0xFF; y = y >> 8;
     fba:	d5 ae       	sts	0xb5, r29
					s->transmit_data[6] = y & 0xFF; y = y >> 8;
     fbc:	c6 ae       	sts	0xb6, r28
					s->transmit_data[7] = y & 0xFF; y = y >> 8;
     fbe:	87 ae       	sts	0xb7, r24
					s->transmit_data[8] = y & 0xFF;
     fc0:	e0 5c       	subi	r30, 0xC0	; 192
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	40 82       	st	Z, r4
					
					s->transmit_data[9] = z & 0xFF; z = z >> 8;
     fc6:	f8 01       	movw	r30, r16
     fc8:	ef 5b       	subi	r30, 0xBF	; 191
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	60 83       	st	Z, r22
					s->transmit_data[10] = z & 0xFF; z = z >> 8;
     fce:	f8 01       	movw	r30, r16
     fd0:	ee 5b       	subi	r30, 0xBE	; 190
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	70 83       	st	Z, r23
					s->transmit_data[11] = z & 0xFF; z = z >> 8;
     fd6:	f8 01       	movw	r30, r16
     fd8:	ed 5b       	subi	r30, 0xBD	; 189
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 83       	st	Z, r24
					s->transmit_data[12] = z & 0xFF;
     fde:	f8 01       	movw	r30, r16
     fe0:	ec 5b       	subi	r30, 0xBC	; 188
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	90 83       	st	Z, r25
					
					uint8_t status_bits = 0;
					if (IsMoving (&x_axis))
     fe6:	8f ec       	ldi	r24, 0xCF	; 207
     fe8:	90 e2       	ldi	r25, 0x20	; 32
     fea:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <IsMoving>
     fee:	f8 2e       	mov	r15, r24
					{
						status_bits |= 0x01;
					}
					if (IsMoving (&y_axis))
     ff0:	8c ee       	ldi	r24, 0xEC	; 236
     ff2:	90 e2       	ldi	r25, 0x20	; 32
     ff4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <IsMoving>
     ff8:	88 23       	and	r24, r24
     ffa:	11 f0       	breq	.+4      	; 0x1000 <main+0x29c>
					{
						status_bits |= 0x02;
     ffc:	f2 e0       	ldi	r31, 0x02	; 2
     ffe:	ff 2a       	or	r15, r31
					}
					if (IsMoving (&z_axis))
    1000:	82 eb       	ldi	r24, 0xB2	; 178
    1002:	90 e2       	ldi	r25, 0x20	; 32
    1004:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <IsMoving>
    1008:	88 23       	and	r24, r24
    100a:	11 f0       	breq	.+4      	; 0x1010 <main+0x2ac>
					{
						status_bits |= 0x04;
    100c:	24 e0       	ldi	r18, 0x04	; 4
    100e:	f2 2a       	or	r15, r18
					}
					s->transmit_data[13] = status_bits;
    1010:	f8 01       	movw	r30, r16
    1012:	eb 5b       	subi	r30, 0xBB	; 187
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	f0 82       	st	Z, r15
					
					SerialTransmit (s, 0x00, 14); // Transmit to master device
    1018:	c8 01       	movw	r24, r16
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	4e e0       	ldi	r20, 0x0E	; 14
    101e:	0e 94 8a 04 	call	0x914	; 0x914 <SerialTransmit>
					break;
    1022:	81 cf       	rjmp	.-254    	; 0xf26 <main+0x1c2>

#define TASK_LIMIT_SWITCH_X 1
#define TASK_LIMIT_SWITCH_Y 2
#define TASK_LIMIT_SWITCY_Z 3

int main(void)
    1024:	c8 01       	movw	r24, r16
    1026:	43 96       	adiw	r24, 0x13	; 19
    1028:	24 e0       	ldi	r18, 0x04	; 4
    102a:	44 24       	eor	r4, r4
    102c:	55 24       	eor	r5, r5
    102e:	32 01       	movw	r6, r4
    1030:	88 24       	eor	r8, r8
    1032:	99 24       	eor	r9, r9
    1034:	54 01       	movw	r10, r8
    1036:	cc 24       	eor	r12, r12
    1038:	dd 24       	eor	r13, r13
    103a:	76 01       	movw	r14, r12
    103c:	88 87       	std	Y+8, r24	; 0x08
    103e:	99 87       	std	Y+9, r25	; 0x09
					}
					
					/* Bytes 7:18 are position */
					for (i = 10; i >= 7; i--)
                    {
                        x = (x << 8) | s->receive_data[i];
    1040:	7e 2d       	mov	r23, r14
    1042:	6d 2d       	mov	r22, r13
    1044:	5c 2d       	mov	r21, r12
    1046:	44 27       	eor	r20, r20

#define TASK_LIMIT_SWITCH_X 1
#define TASK_LIMIT_SWITCH_Y 2
#define TASK_LIMIT_SWITCY_Z 3

int main(void)
    1048:	e8 85       	ldd	r30, Y+8	; 0x08
    104a:	f9 85       	ldd	r31, Y+9	; 0x09
    104c:	39 97       	sbiw	r30, 0x09	; 9
					}
					
					/* Bytes 7:18 are position */
					for (i = 10; i >= 7; i--)
                    {
                        x = (x << 8) | s->receive_data[i];
    104e:	80 81       	ld	r24, Z
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	6c 01       	movw	r12, r24
    1058:	7d 01       	movw	r14, r26
    105a:	c4 2a       	or	r12, r20
    105c:	d5 2a       	or	r13, r21
    105e:	e6 2a       	or	r14, r22
    1060:	f7 2a       	or	r15, r23
                        y = (y << 8) | s->receive_data[i + 4];
    1062:	ba 2c       	mov	r11, r10
    1064:	a9 2c       	mov	r10, r9
    1066:	98 2c       	mov	r9, r8
    1068:	88 24       	eor	r8, r8

#define TASK_LIMIT_SWITCH_X 1
#define TASK_LIMIT_SWITCH_Y 2
#define TASK_LIMIT_SWITCY_Z 3

int main(void)
    106a:	e8 85       	ldd	r30, Y+8	; 0x08
    106c:	f9 85       	ldd	r31, Y+9	; 0x09
    106e:	35 97       	sbiw	r30, 0x05	; 5
					
					/* Bytes 7:18 are position */
					for (i = 10; i >= 7; i--)
                    {
                        x = (x << 8) | s->receive_data[i];
                        y = (y << 8) | s->receive_data[i + 4];
    1070:	80 81       	ld	r24, Z
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	a0 e0       	ldi	r26, 0x00	; 0
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	88 2a       	or	r8, r24
    107a:	99 2a       	or	r9, r25
    107c:	aa 2a       	or	r10, r26
    107e:	bb 2a       	or	r11, r27
                        z = (z << 8) | s->receive_data[i + 8];
    1080:	76 2d       	mov	r23, r6
    1082:	65 2d       	mov	r22, r5
    1084:	54 2d       	mov	r21, r4
    1086:	44 27       	eor	r20, r20
    1088:	a8 85       	ldd	r26, Y+8	; 0x08
    108a:	b9 85       	ldd	r27, Y+9	; 0x09
    108c:	8e 91       	ld	r24, -X
    108e:	a8 87       	std	Y+8, r26	; 0x08
    1090:	b9 87       	std	Y+9, r27	; 0x09
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a0 e0       	ldi	r26, 0x00	; 0
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	2c 01       	movw	r4, r24
    109a:	3d 01       	movw	r6, r26
    109c:	44 2a       	or	r4, r20
    109e:	55 2a       	or	r5, r21
    10a0:	66 2a       	or	r6, r22
    10a2:	77 2a       	or	r7, r23
    10a4:	21 50       	subi	r18, 0x01	; 1
						speed_y = (speed_y << 8) | s->receive_data[i+2];
						speed_z = (speed_z << 8) | s->receive_data[i+4];
					}
					
					/* Bytes 7:18 are position */
					for (i = 10; i >= 7; i--)
    10a6:	61 f6       	brne	.-104    	; 0x1040 <main+0x2dc>
                        z = (z << 8) | s->receive_data[i + 8];
                    }
					
					// Move the specified distance in 5 seconds
					// TODO: reincorporate speed into the command
					step_timer->INTCTRLA &= ~TC1_OVFINTLVL_gm; // Disable the step timer
    10a8:	80 91 46 08 	lds	r24, 0x0846
    10ac:	8c 7f       	andi	r24, 0xFC	; 252
    10ae:	80 93 46 08 	sts	0x0846, r24
					time = 5000;
    10b2:	88 e8       	ldi	r24, 0x88	; 136
    10b4:	93 e1       	ldi	r25, 0x13	; 19
    10b6:	a0 e0       	ldi	r26, 0x00	; 0
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	80 93 21 20 	sts	0x2021, r24
    10be:	90 93 22 20 	sts	0x2022, r25
    10c2:	a0 93 23 20 	sts	0x2023, r26
    10c6:	b0 93 24 20 	sts	0x2024, r27
					ovf_count = 0;
    10ca:	10 92 25 20 	sts	0x2025, r1
    10ce:	10 92 26 20 	sts	0x2026, r1
    10d2:	10 92 27 20 	sts	0x2027, r1
    10d6:	10 92 28 20 	sts	0x2028, r1
					x_axis.delta = x - x_axis.location;
    10da:	ef ec       	ldi	r30, 0xCF	; 207
    10dc:	f0 e2       	ldi	r31, 0x20	; 32
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	a2 81       	ldd	r26, Z+2	; 0x02
    10e4:	b3 81       	ldd	r27, Z+3	; 0x03
    10e6:	a7 01       	movw	r20, r14
    10e8:	96 01       	movw	r18, r12
    10ea:	28 1b       	sub	r18, r24
    10ec:	39 0b       	sbc	r19, r25
    10ee:	4a 0b       	sbc	r20, r26
    10f0:	5b 0b       	sbc	r21, r27
    10f2:	ea 81       	ldd	r30, Y+2	; 0x02
    10f4:	fb 81       	ldd	r31, Y+3	; 0x03
    10f6:	20 83       	st	Z, r18
    10f8:	31 83       	std	Z+1, r19	; 0x01
    10fa:	42 83       	std	Z+2, r20	; 0x02
    10fc:	53 83       	std	Z+3, r21	; 0x03
					y_axis.delta = y - y_axis.location;
    10fe:	ec ee       	ldi	r30, 0xEC	; 236
    1100:	f0 e2       	ldi	r31, 0x20	; 32
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	a2 81       	ldd	r26, Z+2	; 0x02
    1108:	b3 81       	ldd	r27, Z+3	; 0x03
    110a:	a5 01       	movw	r20, r10
    110c:	94 01       	movw	r18, r8
    110e:	28 1b       	sub	r18, r24
    1110:	39 0b       	sbc	r19, r25
    1112:	4a 0b       	sbc	r20, r26
    1114:	5b 0b       	sbc	r21, r27
    1116:	ec 81       	ldd	r30, Y+4	; 0x04
    1118:	fd 81       	ldd	r31, Y+5	; 0x05
    111a:	20 83       	st	Z, r18
    111c:	31 83       	std	Z+1, r19	; 0x01
    111e:	42 83       	std	Z+2, r20	; 0x02
    1120:	53 83       	std	Z+3, r21	; 0x03
					z_axis.delta = z - z_axis.location;
    1122:	e2 eb       	ldi	r30, 0xB2	; 178
    1124:	f0 e2       	ldi	r31, 0x20	; 32
    1126:	80 81       	ld	r24, Z
    1128:	91 81       	ldd	r25, Z+1	; 0x01
    112a:	a2 81       	ldd	r26, Z+2	; 0x02
    112c:	b3 81       	ldd	r27, Z+3	; 0x03
    112e:	a3 01       	movw	r20, r6
    1130:	92 01       	movw	r18, r4
    1132:	28 1b       	sub	r18, r24
    1134:	39 0b       	sbc	r19, r25
    1136:	4a 0b       	sbc	r20, r26
    1138:	5b 0b       	sbc	r21, r27
    113a:	ee 81       	ldd	r30, Y+6	; 0x06
    113c:	ff 81       	ldd	r31, Y+7	; 0x07
    113e:	20 83       	st	Z, r18
    1140:	31 83       	std	Z+1, r19	; 0x01
    1142:	42 83       	std	Z+2, r20	; 0x02
    1144:	53 83       	std	Z+3, r21	; 0x03
					step_timer->INTCTRLA |= TC_OVFINTLVL_LO_gc; // Enable the step timer
    1146:	80 91 46 08 	lds	r24, 0x0846
    114a:	81 60       	ori	r24, 0x01	; 1
    114c:	80 93 46 08 	sts	0x0846, r24
					
					//AxisRun(&x_axis, x, speed_x);
					//AxisRun(&y_axis, y, speed_y);
					//AxisRun(&z_axis, z, speed_z);
					
					s->transmit_data[0] = 0x32;
    1150:	82 e3       	ldi	r24, 0x32	; 50
    1152:	d8 01       	movw	r26, r16
    1154:	d8 96       	adiw	r26, 0x38	; 56
    1156:	8c 93       	st	X, r24
					SerialTransmit(s, 0x00, 1);
    1158:	c8 01       	movw	r24, r16
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	43 2d       	mov	r20, r3
    115e:	0e 94 8a 04 	call	0x914	; 0x914 <SerialTransmit>
					break;
    1162:	e1 ce       	rjmp	.-574    	; 0xf26 <main+0x1c2>
				}
			}
		}
		else if (task == TASK_LIMIT_SWITCH_Y)
    1164:	b9 81       	ldd	r27, Y+1	; 0x01
    1166:	b2 30       	cpi	r27, 0x02	; 2
    1168:	09 f0       	breq	.+2      	; 0x116c <main+0x408>
    116a:	dd ce       	rjmp	.-582    	; 0xf26 <main+0x1c2>
		{
			uint8_t v = LimitSwitchHelper(&x_axis);
    116c:	8f ec       	ldi	r24, 0xCF	; 207
    116e:	90 e2       	ldi	r25, 0x20	; 32
    1170:	0e 94 5d 06 	call	0xcba	; 0xcba <LimitSwitchHelper>
    1174:	08 2f       	mov	r16, r24
			v &= LimitSwitchHelper(&y_axis);
    1176:	8c ee       	ldi	r24, 0xEC	; 236
    1178:	90 e2       	ldi	r25, 0x20	; 32
    117a:	0e 94 5d 06 	call	0xcba	; 0xcba <LimitSwitchHelper>
    117e:	08 23       	and	r16, r24
			v &= LimitSwitchHelper(&z_axis);
    1180:	82 eb       	ldi	r24, 0xB2	; 178
    1182:	90 e2       	ldi	r25, 0x20	; 32
    1184:	0e 94 5d 06 	call	0xcba	; 0xcba <LimitSwitchHelper>
    1188:	80 23       	and	r24, r16
			if (v)
    118a:	09 f0       	breq	.+2      	; 0x118e <main+0x42a>
    118c:	cb ce       	rjmp	.-618    	; 0xf24 <main+0x1c0>
    118e:	cb ce       	rjmp	.-618    	; 0xf26 <main+0x1c2>

00001190 <__mulsi3>:
    1190:	62 9f       	mul	r22, r18
    1192:	d0 01       	movw	r26, r0
    1194:	73 9f       	mul	r23, r19
    1196:	f0 01       	movw	r30, r0
    1198:	82 9f       	mul	r24, r18
    119a:	e0 0d       	add	r30, r0
    119c:	f1 1d       	adc	r31, r1
    119e:	64 9f       	mul	r22, r20
    11a0:	e0 0d       	add	r30, r0
    11a2:	f1 1d       	adc	r31, r1
    11a4:	92 9f       	mul	r25, r18
    11a6:	f0 0d       	add	r31, r0
    11a8:	83 9f       	mul	r24, r19
    11aa:	f0 0d       	add	r31, r0
    11ac:	74 9f       	mul	r23, r20
    11ae:	f0 0d       	add	r31, r0
    11b0:	65 9f       	mul	r22, r21
    11b2:	f0 0d       	add	r31, r0
    11b4:	99 27       	eor	r25, r25
    11b6:	72 9f       	mul	r23, r18
    11b8:	b0 0d       	add	r27, r0
    11ba:	e1 1d       	adc	r30, r1
    11bc:	f9 1f       	adc	r31, r25
    11be:	63 9f       	mul	r22, r19
    11c0:	b0 0d       	add	r27, r0
    11c2:	e1 1d       	adc	r30, r1
    11c4:	f9 1f       	adc	r31, r25
    11c6:	bd 01       	movw	r22, r26
    11c8:	cf 01       	movw	r24, r30
    11ca:	11 24       	eor	r1, r1
    11cc:	08 95       	ret

000011ce <__divmodsi4>:
    11ce:	97 fb       	bst	r25, 7
    11d0:	09 2e       	mov	r0, r25
    11d2:	05 26       	eor	r0, r21
    11d4:	0e d0       	rcall	.+28     	; 0x11f2 <__divmodsi4_neg1>
    11d6:	57 fd       	sbrc	r21, 7
    11d8:	04 d0       	rcall	.+8      	; 0x11e2 <__divmodsi4_neg2>
    11da:	14 d0       	rcall	.+40     	; 0x1204 <__udivmodsi4>
    11dc:	0a d0       	rcall	.+20     	; 0x11f2 <__divmodsi4_neg1>
    11de:	00 1c       	adc	r0, r0
    11e0:	38 f4       	brcc	.+14     	; 0x11f0 <__divmodsi4_exit>

000011e2 <__divmodsi4_neg2>:
    11e2:	50 95       	com	r21
    11e4:	40 95       	com	r20
    11e6:	30 95       	com	r19
    11e8:	21 95       	neg	r18
    11ea:	3f 4f       	sbci	r19, 0xFF	; 255
    11ec:	4f 4f       	sbci	r20, 0xFF	; 255
    11ee:	5f 4f       	sbci	r21, 0xFF	; 255

000011f0 <__divmodsi4_exit>:
    11f0:	08 95       	ret

000011f2 <__divmodsi4_neg1>:
    11f2:	f6 f7       	brtc	.-4      	; 0x11f0 <__divmodsi4_exit>
    11f4:	90 95       	com	r25
    11f6:	80 95       	com	r24
    11f8:	70 95       	com	r23
    11fa:	61 95       	neg	r22
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1200:	9f 4f       	sbci	r25, 0xFF	; 255
    1202:	08 95       	ret

00001204 <__udivmodsi4>:
    1204:	a1 e2       	ldi	r26, 0x21	; 33
    1206:	1a 2e       	mov	r1, r26
    1208:	aa 1b       	sub	r26, r26
    120a:	bb 1b       	sub	r27, r27
    120c:	fd 01       	movw	r30, r26
    120e:	0d c0       	rjmp	.+26     	; 0x122a <__udivmodsi4_ep>

00001210 <__udivmodsi4_loop>:
    1210:	aa 1f       	adc	r26, r26
    1212:	bb 1f       	adc	r27, r27
    1214:	ee 1f       	adc	r30, r30
    1216:	ff 1f       	adc	r31, r31
    1218:	a2 17       	cp	r26, r18
    121a:	b3 07       	cpc	r27, r19
    121c:	e4 07       	cpc	r30, r20
    121e:	f5 07       	cpc	r31, r21
    1220:	20 f0       	brcs	.+8      	; 0x122a <__udivmodsi4_ep>
    1222:	a2 1b       	sub	r26, r18
    1224:	b3 0b       	sbc	r27, r19
    1226:	e4 0b       	sbc	r30, r20
    1228:	f5 0b       	sbc	r31, r21

0000122a <__udivmodsi4_ep>:
    122a:	66 1f       	adc	r22, r22
    122c:	77 1f       	adc	r23, r23
    122e:	88 1f       	adc	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	1a 94       	dec	r1
    1234:	69 f7       	brne	.-38     	; 0x1210 <__udivmodsi4_loop>
    1236:	60 95       	com	r22
    1238:	70 95       	com	r23
    123a:	80 95       	com	r24
    123c:	90 95       	com	r25
    123e:	9b 01       	movw	r18, r22
    1240:	ac 01       	movw	r20, r24
    1242:	bd 01       	movw	r22, r26
    1244:	cf 01       	movw	r24, r30
    1246:	08 95       	ret

00001248 <_exit>:
    1248:	f8 94       	cli

0000124a <__stop_program>:
    124a:	ff cf       	rjmp	.-2      	; 0x124a <__stop_program>
